// Generated from qasm3Parser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import qasm3ParserListener from './qasm3ParserListener.js';
import qasm3ParserVisitor from './qasm3ParserVisitor.js';

const serializedATN = [4,1,107,798,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,1,0,3,0,130,8,0,1,0,5,0,133,8,0,10,0,12,0,136,9,0,1,0,1,0,1,1,1,1,1,1,
1,1,1,2,1,2,5,2,146,8,2,10,2,12,2,149,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
2,1,2,1,2,3,2,179,8,2,3,2,181,8,2,1,3,1,3,3,3,185,8,3,1,4,1,4,5,4,189,8,
4,10,4,12,4,192,9,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,3,6,201,8,6,1,7,1,7,1,7,
1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,230,8,12,1,12,1,12,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,3,13,241,8,13,1,14,1,14,1,14,3,14,246,8,14,1,14,
1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,258,8,16,1,16,1,16,1,17,
1,17,3,17,264,8,17,1,17,1,17,1,18,1,18,1,18,3,18,271,8,18,1,18,1,18,1,19,
5,19,276,8,19,10,19,12,19,279,9,19,1,19,1,19,1,19,3,19,284,8,19,1,19,3,19,
287,8,19,1,19,3,19,290,8,19,1,19,1,19,1,19,1,19,5,19,296,8,19,10,19,12,19,
299,9,19,1,19,1,19,1,19,3,19,304,8,19,1,19,3,19,307,8,19,1,19,3,19,310,8,
19,1,19,3,19,313,8,19,1,19,3,19,316,8,19,1,20,1,20,1,20,3,20,321,8,20,1,
20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,3,23,
337,8,23,1,23,1,23,1,23,3,23,342,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
1,24,1,24,1,25,1,25,1,25,3,25,356,8,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,
364,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,376,8,28,
1,28,1,28,3,28,380,8,28,1,28,1,28,1,29,1,29,1,29,1,29,3,29,388,8,29,1,29,
1,29,3,29,392,8,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,400,8,30,1,30,3,30,
403,8,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,412,8,31,1,31,1,31,1,32,
1,32,1,32,1,33,1,33,1,33,3,33,422,8,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,
430,8,34,1,34,3,34,433,8,34,1,34,1,34,3,34,437,8,34,1,34,1,34,3,34,441,8,
34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,454,8,35,
1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,468,8,35,
1,35,1,35,3,35,472,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,509,8,35,10,35,
12,35,512,9,35,1,36,1,36,1,36,5,36,517,8,36,10,36,12,36,520,9,36,1,37,1,
37,1,37,3,37,525,8,37,1,38,1,38,1,38,1,39,3,39,531,8,39,1,39,1,39,3,39,535,
8,39,1,39,1,39,3,39,539,8,39,1,40,1,40,1,40,1,40,5,40,545,8,40,10,40,12,
40,548,9,40,1,40,3,40,551,8,40,1,40,1,40,1,41,1,41,1,41,3,41,558,8,41,1,
41,1,41,1,41,3,41,563,8,41,5,41,565,8,41,10,41,12,41,568,9,41,1,41,3,41,
571,8,41,1,41,1,41,1,42,1,42,1,42,1,42,3,42,579,8,42,1,42,1,42,1,42,3,42,
584,8,42,5,42,586,8,42,10,42,12,42,589,9,42,1,42,3,42,592,8,42,3,42,594,
8,42,1,42,1,42,1,43,1,43,5,43,600,8,43,10,43,12,43,603,9,43,1,44,1,44,1,
44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,619,8,45,
3,45,621,8,45,1,45,1,45,1,46,1,46,3,46,627,8,46,1,46,1,46,3,46,631,8,46,
1,46,1,46,3,46,635,8,46,1,46,1,46,3,46,639,8,46,1,46,1,46,3,46,643,8,46,
1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,653,8,46,3,46,655,8,46,1,47,
1,47,3,47,659,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,
1,49,1,49,1,49,1,49,1,49,3,49,677,8,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,
1,51,1,52,1,52,3,52,689,8,52,1,53,1,53,1,54,1,54,3,54,695,8,54,1,55,1,55,
1,55,1,55,3,55,701,8,55,3,55,703,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
1,56,1,56,3,56,714,8,56,1,56,1,56,1,56,3,56,719,8,56,1,57,1,57,1,57,5,57,
724,8,57,10,57,12,57,727,9,57,1,57,3,57,730,8,57,1,58,1,58,1,58,5,58,735,
8,58,10,58,12,58,738,9,58,1,58,3,58,741,8,58,1,59,1,59,1,59,5,59,746,8,59,
10,59,12,59,749,9,59,1,59,3,59,752,8,59,1,60,1,60,1,60,5,60,757,8,60,10,
60,12,60,760,9,60,1,60,3,60,763,8,60,1,61,1,61,1,61,5,61,768,8,61,10,61,
12,61,771,9,61,1,61,3,61,774,8,61,1,62,1,62,1,62,5,62,779,8,62,10,62,12,
62,782,9,62,1,62,3,62,785,8,62,1,63,1,63,1,63,5,63,790,8,63,10,63,12,63,
793,9,63,1,63,3,63,796,8,63,1,63,0,1,70,64,0,2,4,6,8,10,12,14,16,18,20,22,
24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
116,118,120,122,124,126,0,11,1,0,22,23,2,0,26,26,28,28,2,0,61,61,79,79,2,
0,65,65,76,77,2,0,50,50,83,92,2,0,66,66,68,69,2,0,63,63,65,65,1,0,42,43,
1,0,24,25,2,0,46,48,88,88,1,0,88,89,881,0,129,1,0,0,0,2,139,1,0,0,0,4,180,
1,0,0,0,6,182,1,0,0,0,8,186,1,0,0,0,10,195,1,0,0,0,12,200,1,0,0,0,14,202,
1,0,0,0,16,206,1,0,0,0,18,210,1,0,0,0,20,213,1,0,0,0,22,216,1,0,0,0,24,219,
1,0,0,0,26,233,1,0,0,0,28,242,1,0,0,0,30,249,1,0,0,0,32,255,1,0,0,0,34,261,
1,0,0,0,36,267,1,0,0,0,38,315,1,0,0,0,40,317,1,0,0,0,42,324,1,0,0,0,44,328,
1,0,0,0,46,336,1,0,0,0,48,345,1,0,0,0,50,352,1,0,0,0,52,360,1,0,0,0,54,367,
1,0,0,0,56,371,1,0,0,0,58,383,1,0,0,0,60,395,1,0,0,0,62,407,1,0,0,0,64,415,
1,0,0,0,66,418,1,0,0,0,68,425,1,0,0,0,70,471,1,0,0,0,72,513,1,0,0,0,74,524,
1,0,0,0,76,526,1,0,0,0,78,530,1,0,0,0,80,540,1,0,0,0,82,554,1,0,0,0,84,574,
1,0,0,0,86,597,1,0,0,0,88,604,1,0,0,0,90,620,1,0,0,0,92,654,1,0,0,0,94,656,
1,0,0,0,96,660,1,0,0,0,98,667,1,0,0,0,100,680,1,0,0,0,102,684,1,0,0,0,104,
688,1,0,0,0,106,690,1,0,0,0,108,694,1,0,0,0,110,702,1,0,0,0,112,718,1,0,
0,0,114,720,1,0,0,0,116,731,1,0,0,0,118,742,1,0,0,0,120,753,1,0,0,0,122,
764,1,0,0,0,124,775,1,0,0,0,126,786,1,0,0,0,128,130,3,2,1,0,129,128,1,0,
0,0,129,130,1,0,0,0,130,134,1,0,0,0,131,133,3,4,2,0,132,131,1,0,0,0,133,
136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,134,1,0,
0,0,137,138,5,0,0,1,138,1,1,0,0,0,139,140,5,1,0,0,140,141,5,99,0,0,141,142,
5,58,0,0,142,3,1,0,0,0,143,181,3,10,5,0,144,146,3,6,3,0,145,144,1,0,0,0,
146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,178,1,0,0,0,149,147,
1,0,0,0,150,179,3,44,22,0,151,179,3,62,31,0,152,179,3,32,16,0,153,179,3,
34,17,0,154,179,3,18,9,0,155,179,3,66,33,0,156,179,3,14,7,0,157,179,3,46,
23,0,158,179,3,48,24,0,159,179,3,20,10,0,160,179,3,56,28,0,161,179,3,68,
34,0,162,179,3,36,18,0,163,179,3,22,11,0,164,179,3,64,32,0,165,179,3,58,
29,0,166,179,3,24,12,0,167,179,3,38,19,0,168,179,3,60,30,0,169,179,3,26,
13,0,170,179,3,16,8,0,171,179,3,50,25,0,172,179,3,40,20,0,173,179,3,52,26,
0,174,179,3,54,27,0,175,179,3,42,21,0,176,179,3,28,14,0,177,179,3,30,15,
0,178,150,1,0,0,0,178,151,1,0,0,0,178,152,1,0,0,0,178,153,1,0,0,0,178,154,
1,0,0,0,178,155,1,0,0,0,178,156,1,0,0,0,178,157,1,0,0,0,178,158,1,0,0,0,
178,159,1,0,0,0,178,160,1,0,0,0,178,161,1,0,0,0,178,162,1,0,0,0,178,163,
1,0,0,0,178,164,1,0,0,0,178,165,1,0,0,0,178,166,1,0,0,0,178,167,1,0,0,0,
178,168,1,0,0,0,178,169,1,0,0,0,178,170,1,0,0,0,178,171,1,0,0,0,178,172,
1,0,0,0,178,173,1,0,0,0,178,174,1,0,0,0,178,175,1,0,0,0,178,176,1,0,0,0,
178,177,1,0,0,0,179,181,1,0,0,0,180,143,1,0,0,0,180,147,1,0,0,0,181,5,1,
0,0,0,182,184,5,21,0,0,183,185,5,102,0,0,184,183,1,0,0,0,184,185,1,0,0,0,
185,7,1,0,0,0,186,190,5,53,0,0,187,189,3,4,2,0,188,187,1,0,0,0,189,192,1,
0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,
194,5,54,0,0,194,9,1,0,0,0,195,196,5,20,0,0,196,197,5,102,0,0,197,11,1,0,
0,0,198,201,3,4,2,0,199,201,3,8,4,0,200,198,1,0,0,0,200,199,1,0,0,0,201,
13,1,0,0,0,202,203,5,3,0,0,203,204,5,93,0,0,204,205,5,58,0,0,205,15,1,0,
0,0,206,207,5,2,0,0,207,208,5,93,0,0,208,209,5,58,0,0,209,17,1,0,0,0,210,
211,5,11,0,0,211,212,5,58,0,0,212,19,1,0,0,0,213,214,5,12,0,0,214,215,5,
58,0,0,215,21,1,0,0,0,216,217,5,15,0,0,217,218,5,58,0,0,218,23,1,0,0,0,219,
220,5,17,0,0,220,221,3,92,46,0,221,222,5,88,0,0,222,229,5,19,0,0,223,230,
3,80,40,0,224,225,5,51,0,0,225,226,3,78,39,0,226,227,5,52,0,0,227,230,1,
0,0,0,228,230,5,88,0,0,229,223,1,0,0,0,229,224,1,0,0,0,229,228,1,0,0,0,230,
231,1,0,0,0,231,232,3,12,6,0,232,25,1,0,0,0,233,234,5,13,0,0,234,235,5,55,
0,0,235,236,3,70,35,0,236,237,5,56,0,0,237,240,3,12,6,0,238,239,5,14,0,0,
239,241,3,12,6,0,240,238,1,0,0,0,240,241,1,0,0,0,241,27,1,0,0,0,242,245,
5,16,0,0,243,246,3,70,35,0,244,246,3,76,38,0,245,243,1,0,0,0,245,244,1,0,
0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,5,58,0,0,248,29,1,0,0,0,249,
250,5,18,0,0,250,251,5,55,0,0,251,252,3,70,35,0,252,253,5,56,0,0,253,254,
3,12,6,0,254,31,1,0,0,0,255,257,5,49,0,0,256,258,3,124,62,0,257,256,1,0,
0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,260,5,58,0,0,260,33,1,0,0,0,261,
263,5,9,0,0,262,264,3,100,50,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,1,
0,0,0,265,266,3,8,4,0,266,35,1,0,0,0,267,268,5,46,0,0,268,270,3,100,50,0,
269,271,3,124,62,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,
5,58,0,0,273,37,1,0,0,0,274,276,3,90,45,0,275,274,1,0,0,0,276,279,1,0,0,
0,277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,286,
5,88,0,0,281,283,5,55,0,0,282,284,3,120,60,0,283,282,1,0,0,0,283,284,1,0,
0,0,284,285,1,0,0,0,285,287,5,56,0,0,286,281,1,0,0,0,286,287,1,0,0,0,287,
289,1,0,0,0,288,290,3,100,50,0,289,288,1,0,0,0,289,290,1,0,0,0,290,291,1,
0,0,0,291,292,3,124,62,0,292,293,5,58,0,0,293,316,1,0,0,0,294,296,3,90,45,
0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,
1,0,0,0,299,297,1,0,0,0,300,306,5,39,0,0,301,303,5,55,0,0,302,304,3,120,
60,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,307,5,56,0,0,306,
301,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,310,3,100,50,0,309,308,1,
0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,313,3,124,62,0,312,311,1,0,0,0,
312,313,1,0,0,0,313,314,1,0,0,0,314,316,5,58,0,0,315,277,1,0,0,0,315,297,
1,0,0,0,316,39,1,0,0,0,317,320,3,76,38,0,318,319,5,62,0,0,319,321,3,86,43,
0,320,318,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,5,58,0,0,323,41,
1,0,0,0,324,325,5,47,0,0,325,326,3,108,54,0,326,327,5,58,0,0,327,43,1,0,
0,0,328,329,5,10,0,0,329,330,5,88,0,0,330,331,5,61,0,0,331,332,3,72,36,0,
332,333,5,58,0,0,333,45,1,0,0,0,334,337,3,92,46,0,335,337,3,96,48,0,336,
334,1,0,0,0,336,335,1,0,0,0,337,338,1,0,0,0,338,341,5,88,0,0,339,340,5,61,
0,0,340,342,3,74,37,0,341,339,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,
344,5,58,0,0,344,47,1,0,0,0,345,346,5,24,0,0,346,347,3,92,46,0,347,348,5,
88,0,0,348,349,5,61,0,0,349,350,3,74,37,0,350,351,5,58,0,0,351,49,1,0,0,
0,352,355,7,0,0,0,353,356,3,92,46,0,354,356,3,96,48,0,355,353,1,0,0,0,355,
354,1,0,0,0,356,357,1,0,0,0,357,358,5,88,0,0,358,359,5,58,0,0,359,51,1,0,
0,0,360,361,7,1,0,0,361,363,5,88,0,0,362,364,3,100,50,0,363,362,1,0,0,0,
363,364,1,0,0,0,364,365,1,0,0,0,365,366,5,58,0,0,366,53,1,0,0,0,367,368,
3,94,47,0,368,369,5,88,0,0,369,370,5,58,0,0,370,55,1,0,0,0,371,372,5,4,0,
0,372,373,5,88,0,0,373,375,5,55,0,0,374,376,3,114,57,0,375,374,1,0,0,0,375,
376,1,0,0,0,376,377,1,0,0,0,377,379,5,56,0,0,378,380,3,88,44,0,379,378,1,
0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,3,8,4,0,382,57,1,0,0,0,383,
384,5,8,0,0,384,385,5,88,0,0,385,387,5,55,0,0,386,388,3,126,63,0,387,386,
1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,391,5,56,0,0,390,392,3,88,44,
0,391,390,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,5,58,0,0,394,59,
1,0,0,0,395,396,5,7,0,0,396,402,5,88,0,0,397,399,5,55,0,0,398,400,3,122,
61,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,403,5,56,0,0,402,
397,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,405,3,122,61,0,405,406,3,
8,4,0,406,61,1,0,0,0,407,408,3,86,43,0,408,411,7,2,0,0,409,412,3,70,35,0,
410,412,3,76,38,0,411,409,1,0,0,0,411,410,1,0,0,0,412,413,1,0,0,0,413,414,
5,58,0,0,414,63,1,0,0,0,415,416,3,70,35,0,416,417,5,58,0,0,417,65,1,0,0,
0,418,419,5,5,0,0,419,421,5,53,0,0,420,422,5,107,0,0,421,420,1,0,0,0,421,
422,1,0,0,0,422,423,1,0,0,0,423,424,5,54,0,0,424,67,1,0,0,0,425,426,5,6,
0,0,426,432,3,102,51,0,427,429,5,55,0,0,428,430,3,116,58,0,429,428,1,0,0,
0,429,430,1,0,0,0,430,431,1,0,0,0,431,433,5,56,0,0,432,427,1,0,0,0,432,433,
1,0,0,0,433,434,1,0,0,0,434,436,3,118,59,0,435,437,3,88,44,0,436,435,1,0,
0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,440,5,53,0,0,439,441,5,107,0,0,440,
439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,5,54,0,0,443,69,1,0,
0,0,444,445,6,35,-1,0,445,446,5,55,0,0,446,447,3,70,35,0,447,448,5,56,0,
0,448,472,1,0,0,0,449,450,7,3,0,0,450,472,3,70,35,15,451,454,3,92,46,0,452,
454,3,96,48,0,453,451,1,0,0,0,453,452,1,0,0,0,454,455,1,0,0,0,455,456,5,
55,0,0,456,457,3,70,35,0,457,458,5,56,0,0,458,472,1,0,0,0,459,460,5,45,0,
0,460,461,5,55,0,0,461,462,3,8,4,0,462,463,5,56,0,0,463,472,1,0,0,0,464,
465,5,88,0,0,465,467,5,55,0,0,466,468,3,120,60,0,467,466,1,0,0,0,467,468,
1,0,0,0,468,469,1,0,0,0,469,472,5,56,0,0,470,472,7,4,0,0,471,444,1,0,0,0,
471,449,1,0,0,0,471,453,1,0,0,0,471,459,1,0,0,0,471,464,1,0,0,0,471,470,
1,0,0,0,472,510,1,0,0,0,473,474,10,16,0,0,474,475,5,67,0,0,475,509,3,70,
35,16,476,477,10,14,0,0,477,478,7,5,0,0,478,509,3,70,35,15,479,480,10,13,
0,0,480,481,7,6,0,0,481,509,3,70,35,14,482,483,10,12,0,0,483,484,5,81,0,
0,484,509,3,70,35,13,485,486,10,11,0,0,486,487,5,80,0,0,487,509,3,70,35,
12,488,489,10,10,0,0,489,490,5,78,0,0,490,509,3,70,35,11,491,492,10,9,0,
0,492,493,5,72,0,0,493,509,3,70,35,10,494,495,10,8,0,0,495,496,5,74,0,0,
496,509,3,70,35,9,497,498,10,7,0,0,498,499,5,70,0,0,499,509,3,70,35,8,500,
501,10,6,0,0,501,502,5,73,0,0,502,509,3,70,35,7,503,504,10,5,0,0,504,505,
5,71,0,0,505,509,3,70,35,6,506,507,10,17,0,0,507,509,3,84,42,0,508,473,1,
0,0,0,508,476,1,0,0,0,508,479,1,0,0,0,508,482,1,0,0,0,508,485,1,0,0,0,508,
488,1,0,0,0,508,491,1,0,0,0,508,494,1,0,0,0,508,497,1,0,0,0,508,500,1,0,
0,0,508,503,1,0,0,0,508,506,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,
511,1,0,0,0,511,71,1,0,0,0,512,510,1,0,0,0,513,518,3,70,35,0,514,515,5,64,
0,0,515,517,3,70,35,0,516,514,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,
519,1,0,0,0,519,73,1,0,0,0,520,518,1,0,0,0,521,525,3,82,41,0,522,525,3,70,
35,0,523,525,3,76,38,0,524,521,1,0,0,0,524,522,1,0,0,0,524,523,1,0,0,0,525,
75,1,0,0,0,526,527,5,48,0,0,527,528,3,108,54,0,528,77,1,0,0,0,529,531,3,
70,35,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,534,5,57,0,0,
533,535,3,70,35,0,534,533,1,0,0,0,534,535,1,0,0,0,535,538,1,0,0,0,536,537,
5,57,0,0,537,539,3,70,35,0,538,536,1,0,0,0,538,539,1,0,0,0,539,79,1,0,0,
0,540,541,5,53,0,0,541,546,3,70,35,0,542,543,5,60,0,0,543,545,3,70,35,0,
544,542,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,550,
1,0,0,0,548,546,1,0,0,0,549,551,5,60,0,0,550,549,1,0,0,0,550,551,1,0,0,0,
551,552,1,0,0,0,552,553,5,54,0,0,553,81,1,0,0,0,554,557,5,53,0,0,555,558,
3,70,35,0,556,558,3,82,41,0,557,555,1,0,0,0,557,556,1,0,0,0,558,566,1,0,
0,0,559,562,5,60,0,0,560,563,3,70,35,0,561,563,3,82,41,0,562,560,1,0,0,0,
562,561,1,0,0,0,563,565,1,0,0,0,564,559,1,0,0,0,565,568,1,0,0,0,566,564,
1,0,0,0,566,567,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,569,571,5,60,0,0,
570,569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,573,5,54,0,0,573,83,
1,0,0,0,574,593,5,51,0,0,575,594,3,80,40,0,576,579,3,70,35,0,577,579,3,78,
39,0,578,576,1,0,0,0,578,577,1,0,0,0,579,587,1,0,0,0,580,583,5,60,0,0,581,
584,3,70,35,0,582,584,3,78,39,0,583,581,1,0,0,0,583,582,1,0,0,0,584,586,
1,0,0,0,585,580,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,
588,591,1,0,0,0,589,587,1,0,0,0,590,592,5,60,0,0,591,590,1,0,0,0,591,592,
1,0,0,0,592,594,1,0,0,0,593,575,1,0,0,0,593,578,1,0,0,0,594,595,1,0,0,0,
595,596,5,52,0,0,596,85,1,0,0,0,597,601,5,88,0,0,598,600,3,84,42,0,599,598,
1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,87,1,0,0,0,603,
601,1,0,0,0,604,605,5,62,0,0,605,606,3,92,46,0,606,89,1,0,0,0,607,621,5,
40,0,0,608,609,5,41,0,0,609,610,5,55,0,0,610,611,3,70,35,0,611,612,5,56,
0,0,612,621,1,0,0,0,613,618,7,7,0,0,614,615,5,55,0,0,615,616,3,70,35,0,616,
617,5,56,0,0,617,619,1,0,0,0,618,614,1,0,0,0,618,619,1,0,0,0,619,621,1,0,
0,0,620,607,1,0,0,0,620,608,1,0,0,0,620,613,1,0,0,0,621,622,1,0,0,0,622,
623,5,75,0,0,623,91,1,0,0,0,624,626,5,30,0,0,625,627,3,100,50,0,626,625,
1,0,0,0,626,627,1,0,0,0,627,655,1,0,0,0,628,630,5,31,0,0,629,631,3,100,50,
0,630,629,1,0,0,0,630,631,1,0,0,0,631,655,1,0,0,0,632,634,5,32,0,0,633,635,
3,100,50,0,634,633,1,0,0,0,634,635,1,0,0,0,635,655,1,0,0,0,636,638,5,33,
0,0,637,639,3,100,50,0,638,637,1,0,0,0,638,639,1,0,0,0,639,655,1,0,0,0,640,
642,5,34,0,0,641,643,3,100,50,0,642,641,1,0,0,0,642,643,1,0,0,0,643,655,
1,0,0,0,644,655,5,29,0,0,645,655,5,37,0,0,646,655,5,38,0,0,647,652,5,35,
0,0,648,649,5,51,0,0,649,650,3,92,46,0,650,651,5,52,0,0,651,653,1,0,0,0,
652,648,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,624,1,0,0,0,654,628,
1,0,0,0,654,632,1,0,0,0,654,636,1,0,0,0,654,640,1,0,0,0,654,644,1,0,0,0,
654,645,1,0,0,0,654,646,1,0,0,0,654,647,1,0,0,0,655,93,1,0,0,0,656,658,5,
27,0,0,657,659,3,100,50,0,658,657,1,0,0,0,658,659,1,0,0,0,659,95,1,0,0,0,
660,661,5,36,0,0,661,662,5,51,0,0,662,663,3,92,46,0,663,664,5,60,0,0,664,
665,3,120,60,0,665,666,5,52,0,0,666,97,1,0,0,0,667,668,7,8,0,0,668,669,5,
36,0,0,669,670,5,51,0,0,670,671,3,92,46,0,671,676,5,60,0,0,672,677,3,120,
60,0,673,674,5,44,0,0,674,675,5,61,0,0,675,677,3,70,35,0,676,672,1,0,0,0,
676,673,1,0,0,0,677,678,1,0,0,0,678,679,5,52,0,0,679,99,1,0,0,0,680,681,
5,51,0,0,681,682,3,70,35,0,682,683,5,52,0,0,683,101,1,0,0,0,684,685,7,9,
0,0,685,103,1,0,0,0,686,689,3,70,35,0,687,689,3,112,56,0,688,686,1,0,0,0,
688,687,1,0,0,0,689,105,1,0,0,0,690,691,7,10,0,0,691,107,1,0,0,0,692,695,
3,86,43,0,693,695,5,89,0,0,694,692,1,0,0,0,694,693,1,0,0,0,695,109,1,0,0,
0,696,703,3,92,46,0,697,703,3,98,49,0,698,700,5,28,0,0,699,701,3,100,50,
0,700,699,1,0,0,0,700,701,1,0,0,0,701,703,1,0,0,0,702,696,1,0,0,0,702,697,
1,0,0,0,702,698,1,0,0,0,703,111,1,0,0,0,704,705,3,92,46,0,705,706,5,88,0,
0,706,719,1,0,0,0,707,708,3,94,47,0,708,709,5,88,0,0,709,719,1,0,0,0,710,
711,7,1,0,0,711,713,5,88,0,0,712,714,3,100,50,0,713,712,1,0,0,0,713,714,
1,0,0,0,714,719,1,0,0,0,715,716,3,98,49,0,716,717,5,88,0,0,717,719,1,0,0,
0,718,704,1,0,0,0,718,707,1,0,0,0,718,710,1,0,0,0,718,715,1,0,0,0,719,113,
1,0,0,0,720,725,3,112,56,0,721,722,5,60,0,0,722,724,3,112,56,0,723,721,1,
0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,729,1,0,0,0,727,
725,1,0,0,0,728,730,5,60,0,0,729,728,1,0,0,0,729,730,1,0,0,0,730,115,1,0,
0,0,731,736,3,104,52,0,732,733,5,60,0,0,733,735,3,104,52,0,734,732,1,0,0,
0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,740,1,0,0,0,738,736,
1,0,0,0,739,741,5,60,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,117,1,0,0,0,
742,747,3,106,53,0,743,744,5,60,0,0,744,746,3,106,53,0,745,743,1,0,0,0,746,
749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,751,1,0,0,0,749,747,1,0,
0,0,750,752,5,60,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,119,1,0,0,0,753,
758,3,70,35,0,754,755,5,60,0,0,755,757,3,70,35,0,756,754,1,0,0,0,757,760,
1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,
761,763,5,60,0,0,762,761,1,0,0,0,762,763,1,0,0,0,763,121,1,0,0,0,764,769,
5,88,0,0,765,766,5,60,0,0,766,768,5,88,0,0,767,765,1,0,0,0,768,771,1,0,0,
0,769,767,1,0,0,0,769,770,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,772,774,
5,60,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,123,1,0,0,0,775,780,3,108,54,
0,776,777,5,60,0,0,777,779,3,108,54,0,778,776,1,0,0,0,779,782,1,0,0,0,780,
778,1,0,0,0,780,781,1,0,0,0,781,784,1,0,0,0,782,780,1,0,0,0,783,785,5,60,
0,0,784,783,1,0,0,0,784,785,1,0,0,0,785,125,1,0,0,0,786,791,3,110,55,0,787,
788,5,60,0,0,788,790,3,110,55,0,789,787,1,0,0,0,790,793,1,0,0,0,791,789,
1,0,0,0,791,792,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,794,796,5,60,0,0,
795,794,1,0,0,0,795,796,1,0,0,0,796,127,1,0,0,0,94,129,134,147,178,180,184,
190,200,229,240,245,257,263,270,277,283,286,289,297,303,306,309,312,315,
320,336,341,355,363,375,379,387,391,399,402,411,421,429,432,436,440,453,
467,471,508,510,518,524,530,534,538,546,550,557,562,566,570,578,583,587,
591,593,601,618,620,626,630,634,638,642,652,654,658,676,688,694,700,702,
713,718,725,729,736,740,747,751,758,762,769,773,780,784,791,795];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class qasm3Parser extends antlr4.Parser {

    static grammarFileName = "qasm3Parser.g4";
    static literalNames = [ null, "'OPENQASM'", "'include'", "'defcalgrammar'", 
                            "'def'", "'cal'", "'defcal'", "'gate'", "'extern'", 
                            "'box'", "'let'", "'break'", "'continue'", "'if'", 
                            "'else'", "'end'", "'return'", "'for'", "'while'", 
                            "'in'", null, null, "'input'", "'output'", "'const'", 
                            "'mutable'", "'qreg'", "'qubit'", "'creg'", 
                            "'bool'", "'bit'", "'int'", "'uint'", "'float'", 
                            "'angle'", "'complex'", "'array'", "'duration'", 
                            "'stretch'", "'gphase'", "'inv'", "'pow'", "'ctrl'", 
                            "'negctrl'", "'#dim'", "'durationof'", "'delay'", 
                            "'reset'", "'measure'", "'barrier'", null, "'['", 
                            "']'", "'{'", "'}'", "'('", "')'", "':'", "';'", 
                            "'.'", "','", "'='", "'->'", "'+'", "'++'", 
                            "'-'", "'*'", "'**'", "'/'", "'%'", "'|'", "'||'", 
                            "'&'", "'&&'", "'^'", "'@'", "'~'", "'!'", null, 
                            null, null, null, "'im'" ];
    static symbolicNames = [ null, "OPENQASM", "INCLUDE", "DEFCALGRAMMAR", 
                             "DEF", "CAL", "DEFCAL", "GATE", "EXTERN", "BOX", 
                             "LET", "BREAK", "CONTINUE", "IF", "ELSE", "END", 
                             "RETURN", "FOR", "WHILE", "IN", "PRAGMA", "AnnotationKeyword", 
                             "INPUT", "OUTPUT", "CONST", "MUTABLE", "QREG", 
                             "QUBIT", "CREG", "BOOL", "BIT", "INT", "UINT", 
                             "FLOAT", "ANGLE", "COMPLEX", "ARRAY", "DURATION", 
                             "STRETCH", "GPHASE", "INV", "POW", "CTRL", 
                             "NEGCTRL", "DIM", "DURATIONOF", "DELAY", "RESET", 
                             "MEASURE", "BARRIER", "BooleanLiteral", "LBRACKET", 
                             "RBRACKET", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
                             "COLON", "SEMICOLON", "DOT", "COMMA", "EQUALS", 
                             "ARROW", "PLUS", "DOUBLE_PLUS", "MINUS", "ASTERISK", 
                             "DOUBLE_ASTERISK", "SLASH", "PERCENT", "PIPE", 
                             "DOUBLE_PIPE", "AMPERSAND", "DOUBLE_AMPERSAND", 
                             "CARET", "AT", "TILDE", "EXCLAMATION_POINT", 
                             "EqualityOperator", "CompoundAssignmentOperator", 
                             "ComparisonOperator", "BitshiftOperator", "IMAG", 
                             "ImaginaryLiteral", "BinaryIntegerLiteral", 
                             "OctalIntegerLiteral", "DecimalIntegerLiteral", 
                             "HexIntegerLiteral", "Identifier", "HardwareQubit", 
                             "FloatLiteral", "TimingLiteral", "BitstringLiteral", 
                             "StringLiteral", "Whitespace", "Newline", "LineComment", 
                             "BlockComment", "VERSION_IDENTIFER_WHITESPACE", 
                             "VersionSpecifier", "EAT_INITIAL_SPACE", "EAT_LINE_END", 
                             "RemainingLineContent", "CAL_PRELUDE_WHITESPACE", 
                             "CAL_PRELUDE_COMMENT", "DEFCAL_PRELUDE_WHITESPACE", 
                             "DEFCAL_PRELUDE_COMMENT", "CalibrationBlock" ];
    static ruleNames = [ "program", "version", "statement", "annotation", 
                         "scope", "pragma", "statementOrScope", "calibrationGrammarStatement", 
                         "includeStatement", "breakStatement", "continueStatement", 
                         "endStatement", "forStatement", "ifStatement", 
                         "returnStatement", "whileStatement", "barrierStatement", 
                         "boxStatement", "delayStatement", "gateCallStatement", 
                         "measureArrowAssignmentStatement", "resetStatement", 
                         "aliasDeclarationStatement", "classicalDeclarationStatement", 
                         "constDeclarationStatement", "ioDeclarationStatement", 
                         "oldStyleDeclarationStatement", "quantumDeclarationStatement", 
                         "defStatement", "externStatement", "gateStatement", 
                         "assignmentStatement", "expressionStatement", "calStatement", 
                         "defcalStatement", "expression", "aliasExpression", 
                         "declarationExpression", "measureExpression", "rangeExpression", 
                         "setExpression", "arrayLiteral", "indexOperator", 
                         "indexedIdentifier", "returnSignature", "gateModifier", 
                         "scalarType", "qubitType", "arrayType", "arrayReferenceType", 
                         "designator", "defcalTarget", "defcalArgumentDefinition", 
                         "defcalOperand", "gateOperand", "externArgument", 
                         "argumentDefinition", "argumentDefinitionList", 
                         "defcalArgumentDefinitionList", "defcalOperandList", 
                         "expressionList", "identifierList", "gateOperandList", 
                         "externArgumentList" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = qasm3Parser.ruleNames;
        this.literalNames = qasm3Parser.literalNames;
        this.symbolicNames = qasm3Parser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 35:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 16);
    		case 1:
    			return this.precpred(this._ctx, 14);
    		case 2:
    			return this.precpred(this._ctx, 13);
    		case 3:
    			return this.precpred(this._ctx, 12);
    		case 4:
    			return this.precpred(this._ctx, 11);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 8);
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 6);
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 17);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, qasm3Parser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 129;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.OPENQASM) {
	            this.state = 128;
	            this.version();
	        }

	        this.state = 134;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << qasm3Parser.INCLUDE) | (1 << qasm3Parser.DEFCALGRAMMAR) | (1 << qasm3Parser.DEF) | (1 << qasm3Parser.CAL) | (1 << qasm3Parser.DEFCAL) | (1 << qasm3Parser.GATE) | (1 << qasm3Parser.EXTERN) | (1 << qasm3Parser.BOX) | (1 << qasm3Parser.LET) | (1 << qasm3Parser.BREAK) | (1 << qasm3Parser.CONTINUE) | (1 << qasm3Parser.IF) | (1 << qasm3Parser.END) | (1 << qasm3Parser.RETURN) | (1 << qasm3Parser.FOR) | (1 << qasm3Parser.WHILE) | (1 << qasm3Parser.PRAGMA) | (1 << qasm3Parser.AnnotationKeyword) | (1 << qasm3Parser.INPUT) | (1 << qasm3Parser.OUTPUT) | (1 << qasm3Parser.CONST) | (1 << qasm3Parser.QREG) | (1 << qasm3Parser.QUBIT) | (1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (qasm3Parser.UINT - 32)) | (1 << (qasm3Parser.FLOAT - 32)) | (1 << (qasm3Parser.ANGLE - 32)) | (1 << (qasm3Parser.COMPLEX - 32)) | (1 << (qasm3Parser.ARRAY - 32)) | (1 << (qasm3Parser.DURATION - 32)) | (1 << (qasm3Parser.STRETCH - 32)) | (1 << (qasm3Parser.GPHASE - 32)) | (1 << (qasm3Parser.INV - 32)) | (1 << (qasm3Parser.POW - 32)) | (1 << (qasm3Parser.CTRL - 32)) | (1 << (qasm3Parser.NEGCTRL - 32)) | (1 << (qasm3Parser.DURATIONOF - 32)) | (1 << (qasm3Parser.DELAY - 32)) | (1 << (qasm3Parser.RESET - 32)) | (1 << (qasm3Parser.MEASURE - 32)) | (1 << (qasm3Parser.BARRIER - 32)) | (1 << (qasm3Parser.BooleanLiteral - 32)) | (1 << (qasm3Parser.LPAREN - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)) | (1 << (qasm3Parser.ImaginaryLiteral - 65)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 65)) | (1 << (qasm3Parser.OctalIntegerLiteral - 65)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 65)) | (1 << (qasm3Parser.HexIntegerLiteral - 65)) | (1 << (qasm3Parser.Identifier - 65)) | (1 << (qasm3Parser.HardwareQubit - 65)) | (1 << (qasm3Parser.FloatLiteral - 65)) | (1 << (qasm3Parser.TimingLiteral - 65)) | (1 << (qasm3Parser.BitstringLiteral - 65)))) !== 0)) {
	            this.state = 131;
	            this.statement();
	            this.state = 136;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 137;
	        this.match(qasm3Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	version() {
	    let localctx = new VersionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, qasm3Parser.RULE_version);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 139;
	        this.match(qasm3Parser.OPENQASM);
	        this.state = 140;
	        this.match(qasm3Parser.VersionSpecifier);
	        this.state = 141;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, qasm3Parser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 180;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.PRAGMA:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 143;
	            this.pragma();
	            break;
	        case qasm3Parser.INCLUDE:
	        case qasm3Parser.DEFCALGRAMMAR:
	        case qasm3Parser.DEF:
	        case qasm3Parser.CAL:
	        case qasm3Parser.DEFCAL:
	        case qasm3Parser.GATE:
	        case qasm3Parser.EXTERN:
	        case qasm3Parser.BOX:
	        case qasm3Parser.LET:
	        case qasm3Parser.BREAK:
	        case qasm3Parser.CONTINUE:
	        case qasm3Parser.IF:
	        case qasm3Parser.END:
	        case qasm3Parser.RETURN:
	        case qasm3Parser.FOR:
	        case qasm3Parser.WHILE:
	        case qasm3Parser.AnnotationKeyword:
	        case qasm3Parser.INPUT:
	        case qasm3Parser.OUTPUT:
	        case qasm3Parser.CONST:
	        case qasm3Parser.QREG:
	        case qasm3Parser.QUBIT:
	        case qasm3Parser.CREG:
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.ARRAY:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	        case qasm3Parser.GPHASE:
	        case qasm3Parser.INV:
	        case qasm3Parser.POW:
	        case qasm3Parser.CTRL:
	        case qasm3Parser.NEGCTRL:
	        case qasm3Parser.DURATIONOF:
	        case qasm3Parser.DELAY:
	        case qasm3Parser.RESET:
	        case qasm3Parser.MEASURE:
	        case qasm3Parser.BARRIER:
	        case qasm3Parser.BooleanLiteral:
	        case qasm3Parser.LPAREN:
	        case qasm3Parser.MINUS:
	        case qasm3Parser.TILDE:
	        case qasm3Parser.EXCLAMATION_POINT:
	        case qasm3Parser.ImaginaryLiteral:
	        case qasm3Parser.BinaryIntegerLiteral:
	        case qasm3Parser.OctalIntegerLiteral:
	        case qasm3Parser.DecimalIntegerLiteral:
	        case qasm3Parser.HexIntegerLiteral:
	        case qasm3Parser.Identifier:
	        case qasm3Parser.HardwareQubit:
	        case qasm3Parser.FloatLiteral:
	        case qasm3Parser.TimingLiteral:
	        case qasm3Parser.BitstringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===qasm3Parser.AnnotationKeyword) {
	                this.state = 144;
	                this.annotation();
	                this.state = 149;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 178;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 150;
	                this.aliasDeclarationStatement();
	                break;

	            case 2:
	                this.state = 151;
	                this.assignmentStatement();
	                break;

	            case 3:
	                this.state = 152;
	                this.barrierStatement();
	                break;

	            case 4:
	                this.state = 153;
	                this.boxStatement();
	                break;

	            case 5:
	                this.state = 154;
	                this.breakStatement();
	                break;

	            case 6:
	                this.state = 155;
	                this.calStatement();
	                break;

	            case 7:
	                this.state = 156;
	                this.calibrationGrammarStatement();
	                break;

	            case 8:
	                this.state = 157;
	                this.classicalDeclarationStatement();
	                break;

	            case 9:
	                this.state = 158;
	                this.constDeclarationStatement();
	                break;

	            case 10:
	                this.state = 159;
	                this.continueStatement();
	                break;

	            case 11:
	                this.state = 160;
	                this.defStatement();
	                break;

	            case 12:
	                this.state = 161;
	                this.defcalStatement();
	                break;

	            case 13:
	                this.state = 162;
	                this.delayStatement();
	                break;

	            case 14:
	                this.state = 163;
	                this.endStatement();
	                break;

	            case 15:
	                this.state = 164;
	                this.expressionStatement();
	                break;

	            case 16:
	                this.state = 165;
	                this.externStatement();
	                break;

	            case 17:
	                this.state = 166;
	                this.forStatement();
	                break;

	            case 18:
	                this.state = 167;
	                this.gateCallStatement();
	                break;

	            case 19:
	                this.state = 168;
	                this.gateStatement();
	                break;

	            case 20:
	                this.state = 169;
	                this.ifStatement();
	                break;

	            case 21:
	                this.state = 170;
	                this.includeStatement();
	                break;

	            case 22:
	                this.state = 171;
	                this.ioDeclarationStatement();
	                break;

	            case 23:
	                this.state = 172;
	                this.measureArrowAssignmentStatement();
	                break;

	            case 24:
	                this.state = 173;
	                this.oldStyleDeclarationStatement();
	                break;

	            case 25:
	                this.state = 174;
	                this.quantumDeclarationStatement();
	                break;

	            case 26:
	                this.state = 175;
	                this.resetStatement();
	                break;

	            case 27:
	                this.state = 176;
	                this.returnStatement();
	                break;

	            case 28:
	                this.state = 177;
	                this.whileStatement();
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, qasm3Parser.RULE_annotation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 182;
	        this.match(qasm3Parser.AnnotationKeyword);
	        this.state = 184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.RemainingLineContent) {
	            this.state = 183;
	            this.match(qasm3Parser.RemainingLineContent);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scope() {
	    let localctx = new ScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, qasm3Parser.RULE_scope);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 186;
	        this.match(qasm3Parser.LBRACE);
	        this.state = 190;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << qasm3Parser.INCLUDE) | (1 << qasm3Parser.DEFCALGRAMMAR) | (1 << qasm3Parser.DEF) | (1 << qasm3Parser.CAL) | (1 << qasm3Parser.DEFCAL) | (1 << qasm3Parser.GATE) | (1 << qasm3Parser.EXTERN) | (1 << qasm3Parser.BOX) | (1 << qasm3Parser.LET) | (1 << qasm3Parser.BREAK) | (1 << qasm3Parser.CONTINUE) | (1 << qasm3Parser.IF) | (1 << qasm3Parser.END) | (1 << qasm3Parser.RETURN) | (1 << qasm3Parser.FOR) | (1 << qasm3Parser.WHILE) | (1 << qasm3Parser.PRAGMA) | (1 << qasm3Parser.AnnotationKeyword) | (1 << qasm3Parser.INPUT) | (1 << qasm3Parser.OUTPUT) | (1 << qasm3Parser.CONST) | (1 << qasm3Parser.QREG) | (1 << qasm3Parser.QUBIT) | (1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (qasm3Parser.UINT - 32)) | (1 << (qasm3Parser.FLOAT - 32)) | (1 << (qasm3Parser.ANGLE - 32)) | (1 << (qasm3Parser.COMPLEX - 32)) | (1 << (qasm3Parser.ARRAY - 32)) | (1 << (qasm3Parser.DURATION - 32)) | (1 << (qasm3Parser.STRETCH - 32)) | (1 << (qasm3Parser.GPHASE - 32)) | (1 << (qasm3Parser.INV - 32)) | (1 << (qasm3Parser.POW - 32)) | (1 << (qasm3Parser.CTRL - 32)) | (1 << (qasm3Parser.NEGCTRL - 32)) | (1 << (qasm3Parser.DURATIONOF - 32)) | (1 << (qasm3Parser.DELAY - 32)) | (1 << (qasm3Parser.RESET - 32)) | (1 << (qasm3Parser.MEASURE - 32)) | (1 << (qasm3Parser.BARRIER - 32)) | (1 << (qasm3Parser.BooleanLiteral - 32)) | (1 << (qasm3Parser.LPAREN - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)) | (1 << (qasm3Parser.ImaginaryLiteral - 65)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 65)) | (1 << (qasm3Parser.OctalIntegerLiteral - 65)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 65)) | (1 << (qasm3Parser.HexIntegerLiteral - 65)) | (1 << (qasm3Parser.Identifier - 65)) | (1 << (qasm3Parser.HardwareQubit - 65)) | (1 << (qasm3Parser.FloatLiteral - 65)) | (1 << (qasm3Parser.TimingLiteral - 65)) | (1 << (qasm3Parser.BitstringLiteral - 65)))) !== 0)) {
	            this.state = 187;
	            this.statement();
	            this.state = 192;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 193;
	        this.match(qasm3Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma() {
	    let localctx = new PragmaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, qasm3Parser.RULE_pragma);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 195;
	        this.match(qasm3Parser.PRAGMA);
	        this.state = 196;
	        this.match(qasm3Parser.RemainingLineContent);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementOrScope() {
	    let localctx = new StatementOrScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, qasm3Parser.RULE_statementOrScope);
	    try {
	        this.state = 200;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.INCLUDE:
	        case qasm3Parser.DEFCALGRAMMAR:
	        case qasm3Parser.DEF:
	        case qasm3Parser.CAL:
	        case qasm3Parser.DEFCAL:
	        case qasm3Parser.GATE:
	        case qasm3Parser.EXTERN:
	        case qasm3Parser.BOX:
	        case qasm3Parser.LET:
	        case qasm3Parser.BREAK:
	        case qasm3Parser.CONTINUE:
	        case qasm3Parser.IF:
	        case qasm3Parser.END:
	        case qasm3Parser.RETURN:
	        case qasm3Parser.FOR:
	        case qasm3Parser.WHILE:
	        case qasm3Parser.PRAGMA:
	        case qasm3Parser.AnnotationKeyword:
	        case qasm3Parser.INPUT:
	        case qasm3Parser.OUTPUT:
	        case qasm3Parser.CONST:
	        case qasm3Parser.QREG:
	        case qasm3Parser.QUBIT:
	        case qasm3Parser.CREG:
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.ARRAY:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	        case qasm3Parser.GPHASE:
	        case qasm3Parser.INV:
	        case qasm3Parser.POW:
	        case qasm3Parser.CTRL:
	        case qasm3Parser.NEGCTRL:
	        case qasm3Parser.DURATIONOF:
	        case qasm3Parser.DELAY:
	        case qasm3Parser.RESET:
	        case qasm3Parser.MEASURE:
	        case qasm3Parser.BARRIER:
	        case qasm3Parser.BooleanLiteral:
	        case qasm3Parser.LPAREN:
	        case qasm3Parser.MINUS:
	        case qasm3Parser.TILDE:
	        case qasm3Parser.EXCLAMATION_POINT:
	        case qasm3Parser.ImaginaryLiteral:
	        case qasm3Parser.BinaryIntegerLiteral:
	        case qasm3Parser.OctalIntegerLiteral:
	        case qasm3Parser.DecimalIntegerLiteral:
	        case qasm3Parser.HexIntegerLiteral:
	        case qasm3Parser.Identifier:
	        case qasm3Parser.HardwareQubit:
	        case qasm3Parser.FloatLiteral:
	        case qasm3Parser.TimingLiteral:
	        case qasm3Parser.BitstringLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 198;
	            this.statement();
	            break;
	        case qasm3Parser.LBRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 199;
	            this.scope();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	calibrationGrammarStatement() {
	    let localctx = new CalibrationGrammarStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, qasm3Parser.RULE_calibrationGrammarStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 202;
	        this.match(qasm3Parser.DEFCALGRAMMAR);
	        this.state = 203;
	        this.match(qasm3Parser.StringLiteral);
	        this.state = 204;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	includeStatement() {
	    let localctx = new IncludeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, qasm3Parser.RULE_includeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 206;
	        this.match(qasm3Parser.INCLUDE);
	        this.state = 207;
	        this.match(qasm3Parser.StringLiteral);
	        this.state = 208;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, qasm3Parser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 210;
	        this.match(qasm3Parser.BREAK);
	        this.state = 211;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, qasm3Parser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 213;
	        this.match(qasm3Parser.CONTINUE);
	        this.state = 214;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endStatement() {
	    let localctx = new EndStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, qasm3Parser.RULE_endStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 216;
	        this.match(qasm3Parser.END);
	        this.state = 217;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, qasm3Parser.RULE_forStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 219;
	        this.match(qasm3Parser.FOR);
	        this.state = 220;
	        this.scalarType();
	        this.state = 221;
	        this.match(qasm3Parser.Identifier);
	        this.state = 222;
	        this.match(qasm3Parser.IN);
	        this.state = 229;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.LBRACE:
	            this.state = 223;
	            this.setExpression();
	            break;
	        case qasm3Parser.LBRACKET:
	            this.state = 224;
	            this.match(qasm3Parser.LBRACKET);
	            this.state = 225;
	            this.rangeExpression();
	            this.state = 226;
	            this.match(qasm3Parser.RBRACKET);
	            break;
	        case qasm3Parser.Identifier:
	            this.state = 228;
	            this.match(qasm3Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 231;
	        localctx.body = this.statementOrScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, qasm3Parser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 233;
	        this.match(qasm3Parser.IF);
	        this.state = 234;
	        this.match(qasm3Parser.LPAREN);
	        this.state = 235;
	        this.expression(0);
	        this.state = 236;
	        this.match(qasm3Parser.RPAREN);
	        this.state = 237;
	        localctx.if_body = this.statementOrScope();
	        this.state = 240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 238;
	            this.match(qasm3Parser.ELSE);
	            this.state = 239;
	            localctx.else_body = this.statementOrScope();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, qasm3Parser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 242;
	        this.match(qasm3Parser.RETURN);
	        this.state = 245;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.ARRAY:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	        case qasm3Parser.DURATIONOF:
	        case qasm3Parser.BooleanLiteral:
	        case qasm3Parser.LPAREN:
	        case qasm3Parser.MINUS:
	        case qasm3Parser.TILDE:
	        case qasm3Parser.EXCLAMATION_POINT:
	        case qasm3Parser.ImaginaryLiteral:
	        case qasm3Parser.BinaryIntegerLiteral:
	        case qasm3Parser.OctalIntegerLiteral:
	        case qasm3Parser.DecimalIntegerLiteral:
	        case qasm3Parser.HexIntegerLiteral:
	        case qasm3Parser.Identifier:
	        case qasm3Parser.HardwareQubit:
	        case qasm3Parser.FloatLiteral:
	        case qasm3Parser.TimingLiteral:
	        case qasm3Parser.BitstringLiteral:
	        	this.state = 243;
	        	this.expression(0);
	        	break;
	        case qasm3Parser.MEASURE:
	        	this.state = 244;
	        	this.measureExpression();
	        	break;
	        case qasm3Parser.SEMICOLON:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 247;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, qasm3Parser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this.match(qasm3Parser.WHILE);
	        this.state = 250;
	        this.match(qasm3Parser.LPAREN);
	        this.state = 251;
	        this.expression(0);
	        this.state = 252;
	        this.match(qasm3Parser.RPAREN);
	        this.state = 253;
	        localctx.body = this.statementOrScope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	barrierStatement() {
	    let localctx = new BarrierStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, qasm3Parser.RULE_barrierStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 255;
	        this.match(qasm3Parser.BARRIER);
	        this.state = 257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.Identifier || _la===qasm3Parser.HardwareQubit) {
	            this.state = 256;
	            this.gateOperandList();
	        }

	        this.state = 259;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boxStatement() {
	    let localctx = new BoxStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, qasm3Parser.RULE_boxStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(qasm3Parser.BOX);
	        this.state = 263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.LBRACKET) {
	            this.state = 262;
	            this.designator();
	        }

	        this.state = 265;
	        this.scope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delayStatement() {
	    let localctx = new DelayStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, qasm3Parser.RULE_delayStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        this.match(qasm3Parser.DELAY);
	        this.state = 268;
	        this.designator();
	        this.state = 270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.Identifier || _la===qasm3Parser.HardwareQubit) {
	            this.state = 269;
	            this.gateOperandList();
	        }

	        this.state = 272;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gateCallStatement() {
	    let localctx = new GateCallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, qasm3Parser.RULE_gateCallStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 277;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (qasm3Parser.INV - 40)) | (1 << (qasm3Parser.POW - 40)) | (1 << (qasm3Parser.CTRL - 40)) | (1 << (qasm3Parser.NEGCTRL - 40)))) !== 0)) {
	                this.state = 274;
	                this.gateModifier();
	                this.state = 279;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 280;
	            this.match(qasm3Parser.Identifier);
	            this.state = 286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LPAREN) {
	                this.state = 281;
	                this.match(qasm3Parser.LPAREN);
	                this.state = 283;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (qasm3Parser.BOOL - 29)) | (1 << (qasm3Parser.BIT - 29)) | (1 << (qasm3Parser.INT - 29)) | (1 << (qasm3Parser.UINT - 29)) | (1 << (qasm3Parser.FLOAT - 29)) | (1 << (qasm3Parser.ANGLE - 29)) | (1 << (qasm3Parser.COMPLEX - 29)) | (1 << (qasm3Parser.ARRAY - 29)) | (1 << (qasm3Parser.DURATION - 29)) | (1 << (qasm3Parser.STRETCH - 29)) | (1 << (qasm3Parser.DURATIONOF - 29)) | (1 << (qasm3Parser.BooleanLiteral - 29)) | (1 << (qasm3Parser.LPAREN - 29)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)) | (1 << (qasm3Parser.ImaginaryLiteral - 65)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 65)) | (1 << (qasm3Parser.OctalIntegerLiteral - 65)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 65)) | (1 << (qasm3Parser.HexIntegerLiteral - 65)) | (1 << (qasm3Parser.Identifier - 65)) | (1 << (qasm3Parser.HardwareQubit - 65)) | (1 << (qasm3Parser.FloatLiteral - 65)) | (1 << (qasm3Parser.TimingLiteral - 65)) | (1 << (qasm3Parser.BitstringLiteral - 65)))) !== 0)) {
	                    this.state = 282;
	                    this.expressionList();
	                }

	                this.state = 285;
	                this.match(qasm3Parser.RPAREN);
	            }

	            this.state = 289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 288;
	                this.designator();
	            }

	            this.state = 291;
	            this.gateOperandList();
	            this.state = 292;
	            this.match(qasm3Parser.SEMICOLON);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (qasm3Parser.INV - 40)) | (1 << (qasm3Parser.POW - 40)) | (1 << (qasm3Parser.CTRL - 40)) | (1 << (qasm3Parser.NEGCTRL - 40)))) !== 0)) {
	                this.state = 294;
	                this.gateModifier();
	                this.state = 299;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 300;
	            this.match(qasm3Parser.GPHASE);
	            this.state = 306;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LPAREN) {
	                this.state = 301;
	                this.match(qasm3Parser.LPAREN);
	                this.state = 303;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (qasm3Parser.BOOL - 29)) | (1 << (qasm3Parser.BIT - 29)) | (1 << (qasm3Parser.INT - 29)) | (1 << (qasm3Parser.UINT - 29)) | (1 << (qasm3Parser.FLOAT - 29)) | (1 << (qasm3Parser.ANGLE - 29)) | (1 << (qasm3Parser.COMPLEX - 29)) | (1 << (qasm3Parser.ARRAY - 29)) | (1 << (qasm3Parser.DURATION - 29)) | (1 << (qasm3Parser.STRETCH - 29)) | (1 << (qasm3Parser.DURATIONOF - 29)) | (1 << (qasm3Parser.BooleanLiteral - 29)) | (1 << (qasm3Parser.LPAREN - 29)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)) | (1 << (qasm3Parser.ImaginaryLiteral - 65)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 65)) | (1 << (qasm3Parser.OctalIntegerLiteral - 65)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 65)) | (1 << (qasm3Parser.HexIntegerLiteral - 65)) | (1 << (qasm3Parser.Identifier - 65)) | (1 << (qasm3Parser.HardwareQubit - 65)) | (1 << (qasm3Parser.FloatLiteral - 65)) | (1 << (qasm3Parser.TimingLiteral - 65)) | (1 << (qasm3Parser.BitstringLiteral - 65)))) !== 0)) {
	                    this.state = 302;
	                    this.expressionList();
	                }

	                this.state = 305;
	                this.match(qasm3Parser.RPAREN);
	            }

	            this.state = 309;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 308;
	                this.designator();
	            }

	            this.state = 312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.Identifier || _la===qasm3Parser.HardwareQubit) {
	                this.state = 311;
	                this.gateOperandList();
	            }

	            this.state = 314;
	            this.match(qasm3Parser.SEMICOLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	measureArrowAssignmentStatement() {
	    let localctx = new MeasureArrowAssignmentStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, qasm3Parser.RULE_measureArrowAssignmentStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 317;
	        this.measureExpression();
	        this.state = 320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.ARROW) {
	            this.state = 318;
	            this.match(qasm3Parser.ARROW);
	            this.state = 319;
	            this.indexedIdentifier();
	        }

	        this.state = 322;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetStatement() {
	    let localctx = new ResetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, qasm3Parser.RULE_resetStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this.match(qasm3Parser.RESET);
	        this.state = 325;
	        this.gateOperand();
	        this.state = 326;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasDeclarationStatement() {
	    let localctx = new AliasDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, qasm3Parser.RULE_aliasDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 328;
	        this.match(qasm3Parser.LET);
	        this.state = 329;
	        this.match(qasm3Parser.Identifier);
	        this.state = 330;
	        this.match(qasm3Parser.EQUALS);
	        this.state = 331;
	        this.aliasExpression();
	        this.state = 332;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classicalDeclarationStatement() {
	    let localctx = new ClassicalDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, qasm3Parser.RULE_classicalDeclarationStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	            this.state = 334;
	            this.scalarType();
	            break;
	        case qasm3Parser.ARRAY:
	            this.state = 335;
	            this.arrayType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 338;
	        this.match(qasm3Parser.Identifier);
	        this.state = 341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.EQUALS) {
	            this.state = 339;
	            this.match(qasm3Parser.EQUALS);
	            this.state = 340;
	            this.declarationExpression();
	        }

	        this.state = 343;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constDeclarationStatement() {
	    let localctx = new ConstDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, qasm3Parser.RULE_constDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 345;
	        this.match(qasm3Parser.CONST);
	        this.state = 346;
	        this.scalarType();
	        this.state = 347;
	        this.match(qasm3Parser.Identifier);
	        this.state = 348;
	        this.match(qasm3Parser.EQUALS);
	        this.state = 349;
	        this.declarationExpression();
	        this.state = 350;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ioDeclarationStatement() {
	    let localctx = new IoDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, qasm3Parser.RULE_ioDeclarationStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 352;
	        _la = this._input.LA(1);
	        if(!(_la===qasm3Parser.INPUT || _la===qasm3Parser.OUTPUT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 355;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	            this.state = 353;
	            this.scalarType();
	            break;
	        case qasm3Parser.ARRAY:
	            this.state = 354;
	            this.arrayType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 357;
	        this.match(qasm3Parser.Identifier);
	        this.state = 358;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oldStyleDeclarationStatement() {
	    let localctx = new OldStyleDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, qasm3Parser.RULE_oldStyleDeclarationStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 360;
	        _la = this._input.LA(1);
	        if(!(_la===qasm3Parser.QREG || _la===qasm3Parser.CREG)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 361;
	        this.match(qasm3Parser.Identifier);
	        this.state = 363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.LBRACKET) {
	            this.state = 362;
	            this.designator();
	        }

	        this.state = 365;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantumDeclarationStatement() {
	    let localctx = new QuantumDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, qasm3Parser.RULE_quantumDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 367;
	        this.qubitType();
	        this.state = 368;
	        this.match(qasm3Parser.Identifier);
	        this.state = 369;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defStatement() {
	    let localctx = new DefStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, qasm3Parser.RULE_defStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 371;
	        this.match(qasm3Parser.DEF);
	        this.state = 372;
	        this.match(qasm3Parser.Identifier);
	        this.state = 373;
	        this.match(qasm3Parser.LPAREN);
	        this.state = 375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (qasm3Parser.CONST - 24)) | (1 << (qasm3Parser.MUTABLE - 24)) | (1 << (qasm3Parser.QREG - 24)) | (1 << (qasm3Parser.QUBIT - 24)) | (1 << (qasm3Parser.CREG - 24)) | (1 << (qasm3Parser.BOOL - 24)) | (1 << (qasm3Parser.BIT - 24)) | (1 << (qasm3Parser.INT - 24)) | (1 << (qasm3Parser.UINT - 24)) | (1 << (qasm3Parser.FLOAT - 24)) | (1 << (qasm3Parser.ANGLE - 24)) | (1 << (qasm3Parser.COMPLEX - 24)) | (1 << (qasm3Parser.DURATION - 24)) | (1 << (qasm3Parser.STRETCH - 24)))) !== 0)) {
	            this.state = 374;
	            this.argumentDefinitionList();
	        }

	        this.state = 377;
	        this.match(qasm3Parser.RPAREN);
	        this.state = 379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.ARROW) {
	            this.state = 378;
	            this.returnSignature();
	        }

	        this.state = 381;
	        this.scope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externStatement() {
	    let localctx = new ExternStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, qasm3Parser.RULE_externStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 383;
	        this.match(qasm3Parser.EXTERN);
	        this.state = 384;
	        this.match(qasm3Parser.Identifier);
	        this.state = 385;
	        this.match(qasm3Parser.LPAREN);
	        this.state = 387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (qasm3Parser.CONST - 24)) | (1 << (qasm3Parser.MUTABLE - 24)) | (1 << (qasm3Parser.CREG - 24)) | (1 << (qasm3Parser.BOOL - 24)) | (1 << (qasm3Parser.BIT - 24)) | (1 << (qasm3Parser.INT - 24)) | (1 << (qasm3Parser.UINT - 24)) | (1 << (qasm3Parser.FLOAT - 24)) | (1 << (qasm3Parser.ANGLE - 24)) | (1 << (qasm3Parser.COMPLEX - 24)) | (1 << (qasm3Parser.DURATION - 24)) | (1 << (qasm3Parser.STRETCH - 24)))) !== 0)) {
	            this.state = 386;
	            this.externArgumentList();
	        }

	        this.state = 389;
	        this.match(qasm3Parser.RPAREN);
	        this.state = 391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.ARROW) {
	            this.state = 390;
	            this.returnSignature();
	        }

	        this.state = 393;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gateStatement() {
	    let localctx = new GateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, qasm3Parser.RULE_gateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395;
	        this.match(qasm3Parser.GATE);
	        this.state = 396;
	        this.match(qasm3Parser.Identifier);
	        this.state = 402;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.LPAREN) {
	            this.state = 397;
	            this.match(qasm3Parser.LPAREN);
	            this.state = 399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.Identifier) {
	                this.state = 398;
	                localctx.params = this.identifierList();
	            }

	            this.state = 401;
	            this.match(qasm3Parser.RPAREN);
	        }

	        this.state = 404;
	        localctx.qubits = this.identifierList();
	        this.state = 405;
	        this.scope();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentStatement() {
	    let localctx = new AssignmentStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, qasm3Parser.RULE_assignmentStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 407;
	        this.indexedIdentifier();
	        this.state = 408;
	        localctx.op = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===qasm3Parser.EQUALS || _la===qasm3Parser.CompoundAssignmentOperator)) {
	            localctx.op = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 411;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.ARRAY:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	        case qasm3Parser.DURATIONOF:
	        case qasm3Parser.BooleanLiteral:
	        case qasm3Parser.LPAREN:
	        case qasm3Parser.MINUS:
	        case qasm3Parser.TILDE:
	        case qasm3Parser.EXCLAMATION_POINT:
	        case qasm3Parser.ImaginaryLiteral:
	        case qasm3Parser.BinaryIntegerLiteral:
	        case qasm3Parser.OctalIntegerLiteral:
	        case qasm3Parser.DecimalIntegerLiteral:
	        case qasm3Parser.HexIntegerLiteral:
	        case qasm3Parser.Identifier:
	        case qasm3Parser.HardwareQubit:
	        case qasm3Parser.FloatLiteral:
	        case qasm3Parser.TimingLiteral:
	        case qasm3Parser.BitstringLiteral:
	            this.state = 409;
	            this.expression(0);
	            break;
	        case qasm3Parser.MEASURE:
	            this.state = 410;
	            this.measureExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 413;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, qasm3Parser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 415;
	        this.expression(0);
	        this.state = 416;
	        this.match(qasm3Parser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	calStatement() {
	    let localctx = new CalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, qasm3Parser.RULE_calStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this.match(qasm3Parser.CAL);
	        this.state = 419;
	        this.match(qasm3Parser.LBRACE);
	        this.state = 421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.CalibrationBlock) {
	            this.state = 420;
	            this.match(qasm3Parser.CalibrationBlock);
	        }

	        this.state = 423;
	        this.match(qasm3Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defcalStatement() {
	    let localctx = new DefcalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, qasm3Parser.RULE_defcalStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(qasm3Parser.DEFCAL);
	        this.state = 426;
	        this.defcalTarget();
	        this.state = 432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.LPAREN) {
	            this.state = 427;
	            this.match(qasm3Parser.LPAREN);
	            this.state = 429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (qasm3Parser.CONST - 24)) | (1 << (qasm3Parser.MUTABLE - 24)) | (1 << (qasm3Parser.QREG - 24)) | (1 << (qasm3Parser.QUBIT - 24)) | (1 << (qasm3Parser.CREG - 24)) | (1 << (qasm3Parser.BOOL - 24)) | (1 << (qasm3Parser.BIT - 24)) | (1 << (qasm3Parser.INT - 24)) | (1 << (qasm3Parser.UINT - 24)) | (1 << (qasm3Parser.FLOAT - 24)) | (1 << (qasm3Parser.ANGLE - 24)) | (1 << (qasm3Parser.COMPLEX - 24)) | (1 << (qasm3Parser.ARRAY - 24)) | (1 << (qasm3Parser.DURATION - 24)) | (1 << (qasm3Parser.STRETCH - 24)) | (1 << (qasm3Parser.DURATIONOF - 24)) | (1 << (qasm3Parser.BooleanLiteral - 24)) | (1 << (qasm3Parser.LPAREN - 24)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)) | (1 << (qasm3Parser.ImaginaryLiteral - 65)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 65)) | (1 << (qasm3Parser.OctalIntegerLiteral - 65)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 65)) | (1 << (qasm3Parser.HexIntegerLiteral - 65)) | (1 << (qasm3Parser.Identifier - 65)) | (1 << (qasm3Parser.HardwareQubit - 65)) | (1 << (qasm3Parser.FloatLiteral - 65)) | (1 << (qasm3Parser.TimingLiteral - 65)) | (1 << (qasm3Parser.BitstringLiteral - 65)))) !== 0)) {
	                this.state = 428;
	                this.defcalArgumentDefinitionList();
	            }

	            this.state = 431;
	            this.match(qasm3Parser.RPAREN);
	        }

	        this.state = 434;
	        this.defcalOperandList();
	        this.state = 436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.ARROW) {
	            this.state = 435;
	            this.returnSignature();
	        }

	        this.state = 438;
	        this.match(qasm3Parser.LBRACE);
	        this.state = 440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.CalibrationBlock) {
	            this.state = 439;
	            this.match(qasm3Parser.CalibrationBlock);
	        }

	        this.state = 442;
	        this.match(qasm3Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 70;
	    this.enterRecursionRule(localctx, 70, qasm3Parser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 471;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ParenthesisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 445;
	            this.match(qasm3Parser.LPAREN);
	            this.state = 446;
	            this.expression(0);
	            this.state = 447;
	            this.match(qasm3Parser.RPAREN);
	            break;

	        case 2:
	            localctx = new UnaryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 449;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)))) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 450;
	            this.expression(15);
	            break;

	        case 3:
	            localctx = new CastExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 453;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case qasm3Parser.BOOL:
	            case qasm3Parser.BIT:
	            case qasm3Parser.INT:
	            case qasm3Parser.UINT:
	            case qasm3Parser.FLOAT:
	            case qasm3Parser.ANGLE:
	            case qasm3Parser.COMPLEX:
	            case qasm3Parser.DURATION:
	            case qasm3Parser.STRETCH:
	                this.state = 451;
	                this.scalarType();
	                break;
	            case qasm3Parser.ARRAY:
	                this.state = 452;
	                this.arrayType();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 455;
	            this.match(qasm3Parser.LPAREN);
	            this.state = 456;
	            this.expression(0);
	            this.state = 457;
	            this.match(qasm3Parser.RPAREN);
	            break;

	        case 4:
	            localctx = new DurationofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 459;
	            this.match(qasm3Parser.DURATIONOF);
	            this.state = 460;
	            this.match(qasm3Parser.LPAREN);
	            this.state = 461;
	            this.scope();
	            this.state = 462;
	            this.match(qasm3Parser.RPAREN);
	            break;

	        case 5:
	            localctx = new CallExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 464;
	            this.match(qasm3Parser.Identifier);
	            this.state = 465;
	            this.match(qasm3Parser.LPAREN);
	            this.state = 467;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (qasm3Parser.BOOL - 29)) | (1 << (qasm3Parser.BIT - 29)) | (1 << (qasm3Parser.INT - 29)) | (1 << (qasm3Parser.UINT - 29)) | (1 << (qasm3Parser.FLOAT - 29)) | (1 << (qasm3Parser.ANGLE - 29)) | (1 << (qasm3Parser.COMPLEX - 29)) | (1 << (qasm3Parser.ARRAY - 29)) | (1 << (qasm3Parser.DURATION - 29)) | (1 << (qasm3Parser.STRETCH - 29)) | (1 << (qasm3Parser.DURATIONOF - 29)) | (1 << (qasm3Parser.BooleanLiteral - 29)) | (1 << (qasm3Parser.LPAREN - 29)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)) | (1 << (qasm3Parser.ImaginaryLiteral - 65)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 65)) | (1 << (qasm3Parser.OctalIntegerLiteral - 65)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 65)) | (1 << (qasm3Parser.HexIntegerLiteral - 65)) | (1 << (qasm3Parser.Identifier - 65)) | (1 << (qasm3Parser.HardwareQubit - 65)) | (1 << (qasm3Parser.FloatLiteral - 65)) | (1 << (qasm3Parser.TimingLiteral - 65)) | (1 << (qasm3Parser.BitstringLiteral - 65)))) !== 0)) {
	                this.state = 466;
	                this.expressionList();
	            }

	            this.state = 469;
	            this.match(qasm3Parser.RPAREN);
	            break;

	        case 6:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 470;
	            _la = this._input.LA(1);
	            if(!(_la===qasm3Parser.BooleanLiteral || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (qasm3Parser.ImaginaryLiteral - 83)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 83)) | (1 << (qasm3Parser.OctalIntegerLiteral - 83)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 83)) | (1 << (qasm3Parser.HexIntegerLiteral - 83)) | (1 << (qasm3Parser.Identifier - 83)) | (1 << (qasm3Parser.HardwareQubit - 83)) | (1 << (qasm3Parser.FloatLiteral - 83)) | (1 << (qasm3Parser.TimingLiteral - 83)) | (1 << (qasm3Parser.BitstringLiteral - 83)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 510;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 508;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PowerExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 473;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 474;
	                    localctx.op = this.match(qasm3Parser.DOUBLE_ASTERISK);
	                    this.state = 475;
	                    this.expression(16);
	                    break;

	                case 2:
	                    localctx = new MultiplicativeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 476;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 477;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (qasm3Parser.ASTERISK - 66)) | (1 << (qasm3Parser.SLASH - 66)) | (1 << (qasm3Parser.PERCENT - 66)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 478;
	                    this.expression(15);
	                    break;

	                case 3:
	                    localctx = new AdditiveExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 479;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 480;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===qasm3Parser.PLUS || _la===qasm3Parser.MINUS)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 481;
	                    this.expression(14);
	                    break;

	                case 4:
	                    localctx = new BitshiftExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 482;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 483;
	                    localctx.op = this.match(qasm3Parser.BitshiftOperator);
	                    this.state = 484;
	                    this.expression(13);
	                    break;

	                case 5:
	                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 485;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 486;
	                    localctx.op = this.match(qasm3Parser.ComparisonOperator);
	                    this.state = 487;
	                    this.expression(12);
	                    break;

	                case 6:
	                    localctx = new EqualityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 488;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 489;
	                    localctx.op = this.match(qasm3Parser.EqualityOperator);
	                    this.state = 490;
	                    this.expression(11);
	                    break;

	                case 7:
	                    localctx = new BitwiseAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 491;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 492;
	                    localctx.op = this.match(qasm3Parser.AMPERSAND);
	                    this.state = 493;
	                    this.expression(10);
	                    break;

	                case 8:
	                    localctx = new BitwiseXorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 494;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 495;
	                    localctx.op = this.match(qasm3Parser.CARET);
	                    this.state = 496;
	                    this.expression(9);
	                    break;

	                case 9:
	                    localctx = new BitwiseOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 497;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 498;
	                    localctx.op = this.match(qasm3Parser.PIPE);
	                    this.state = 499;
	                    this.expression(8);
	                    break;

	                case 10:
	                    localctx = new LogicalAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 500;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 501;
	                    localctx.op = this.match(qasm3Parser.DOUBLE_AMPERSAND);
	                    this.state = 502;
	                    this.expression(7);
	                    break;

	                case 11:
	                    localctx = new LogicalOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 503;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 504;
	                    localctx.op = this.match(qasm3Parser.DOUBLE_PIPE);
	                    this.state = 505;
	                    this.expression(6);
	                    break;

	                case 12:
	                    localctx = new IndexExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, qasm3Parser.RULE_expression);
	                    this.state = 506;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 507;
	                    this.indexOperator();
	                    break;

	                } 
	            }
	            this.state = 512;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	aliasExpression() {
	    let localctx = new AliasExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, qasm3Parser.RULE_aliasExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 513;
	        this.expression(0);
	        this.state = 518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===qasm3Parser.DOUBLE_PLUS) {
	            this.state = 514;
	            this.match(qasm3Parser.DOUBLE_PLUS);
	            this.state = 515;
	            this.expression(0);
	            this.state = 520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationExpression() {
	    let localctx = new DeclarationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, qasm3Parser.RULE_declarationExpression);
	    try {
	        this.state = 524;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.LBRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 521;
	            this.arrayLiteral();
	            break;
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.ARRAY:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	        case qasm3Parser.DURATIONOF:
	        case qasm3Parser.BooleanLiteral:
	        case qasm3Parser.LPAREN:
	        case qasm3Parser.MINUS:
	        case qasm3Parser.TILDE:
	        case qasm3Parser.EXCLAMATION_POINT:
	        case qasm3Parser.ImaginaryLiteral:
	        case qasm3Parser.BinaryIntegerLiteral:
	        case qasm3Parser.OctalIntegerLiteral:
	        case qasm3Parser.DecimalIntegerLiteral:
	        case qasm3Parser.HexIntegerLiteral:
	        case qasm3Parser.Identifier:
	        case qasm3Parser.HardwareQubit:
	        case qasm3Parser.FloatLiteral:
	        case qasm3Parser.TimingLiteral:
	        case qasm3Parser.BitstringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 522;
	            this.expression(0);
	            break;
	        case qasm3Parser.MEASURE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 523;
	            this.measureExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	measureExpression() {
	    let localctx = new MeasureExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, qasm3Parser.RULE_measureExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        this.match(qasm3Parser.MEASURE);
	        this.state = 527;
	        this.gateOperand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeExpression() {
	    let localctx = new RangeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, qasm3Parser.RULE_rangeExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (qasm3Parser.BOOL - 29)) | (1 << (qasm3Parser.BIT - 29)) | (1 << (qasm3Parser.INT - 29)) | (1 << (qasm3Parser.UINT - 29)) | (1 << (qasm3Parser.FLOAT - 29)) | (1 << (qasm3Parser.ANGLE - 29)) | (1 << (qasm3Parser.COMPLEX - 29)) | (1 << (qasm3Parser.ARRAY - 29)) | (1 << (qasm3Parser.DURATION - 29)) | (1 << (qasm3Parser.STRETCH - 29)) | (1 << (qasm3Parser.DURATIONOF - 29)) | (1 << (qasm3Parser.BooleanLiteral - 29)) | (1 << (qasm3Parser.LPAREN - 29)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)) | (1 << (qasm3Parser.ImaginaryLiteral - 65)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 65)) | (1 << (qasm3Parser.OctalIntegerLiteral - 65)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 65)) | (1 << (qasm3Parser.HexIntegerLiteral - 65)) | (1 << (qasm3Parser.Identifier - 65)) | (1 << (qasm3Parser.HardwareQubit - 65)) | (1 << (qasm3Parser.FloatLiteral - 65)) | (1 << (qasm3Parser.TimingLiteral - 65)) | (1 << (qasm3Parser.BitstringLiteral - 65)))) !== 0)) {
	            this.state = 529;
	            this.expression(0);
	        }

	        this.state = 532;
	        this.match(qasm3Parser.COLON);
	        this.state = 534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (qasm3Parser.BOOL - 29)) | (1 << (qasm3Parser.BIT - 29)) | (1 << (qasm3Parser.INT - 29)) | (1 << (qasm3Parser.UINT - 29)) | (1 << (qasm3Parser.FLOAT - 29)) | (1 << (qasm3Parser.ANGLE - 29)) | (1 << (qasm3Parser.COMPLEX - 29)) | (1 << (qasm3Parser.ARRAY - 29)) | (1 << (qasm3Parser.DURATION - 29)) | (1 << (qasm3Parser.STRETCH - 29)) | (1 << (qasm3Parser.DURATIONOF - 29)) | (1 << (qasm3Parser.BooleanLiteral - 29)) | (1 << (qasm3Parser.LPAREN - 29)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (qasm3Parser.MINUS - 65)) | (1 << (qasm3Parser.TILDE - 65)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 65)) | (1 << (qasm3Parser.ImaginaryLiteral - 65)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 65)) | (1 << (qasm3Parser.OctalIntegerLiteral - 65)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 65)) | (1 << (qasm3Parser.HexIntegerLiteral - 65)) | (1 << (qasm3Parser.Identifier - 65)) | (1 << (qasm3Parser.HardwareQubit - 65)) | (1 << (qasm3Parser.FloatLiteral - 65)) | (1 << (qasm3Parser.TimingLiteral - 65)) | (1 << (qasm3Parser.BitstringLiteral - 65)))) !== 0)) {
	            this.state = 533;
	            this.expression(0);
	        }

	        this.state = 538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COLON) {
	            this.state = 536;
	            this.match(qasm3Parser.COLON);
	            this.state = 537;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExpression() {
	    let localctx = new SetExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, qasm3Parser.RULE_setExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this.match(qasm3Parser.LBRACE);
	        this.state = 541;
	        this.expression(0);
	        this.state = 546;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 542;
	                this.match(qasm3Parser.COMMA);
	                this.state = 543;
	                this.expression(0); 
	            }
	            this.state = 548;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
	        }

	        this.state = 550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 549;
	            this.match(qasm3Parser.COMMA);
	        }

	        this.state = 552;
	        this.match(qasm3Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, qasm3Parser.RULE_arrayLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(qasm3Parser.LBRACE);
	        this.state = 557;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.ARRAY:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	        case qasm3Parser.DURATIONOF:
	        case qasm3Parser.BooleanLiteral:
	        case qasm3Parser.LPAREN:
	        case qasm3Parser.MINUS:
	        case qasm3Parser.TILDE:
	        case qasm3Parser.EXCLAMATION_POINT:
	        case qasm3Parser.ImaginaryLiteral:
	        case qasm3Parser.BinaryIntegerLiteral:
	        case qasm3Parser.OctalIntegerLiteral:
	        case qasm3Parser.DecimalIntegerLiteral:
	        case qasm3Parser.HexIntegerLiteral:
	        case qasm3Parser.Identifier:
	        case qasm3Parser.HardwareQubit:
	        case qasm3Parser.FloatLiteral:
	        case qasm3Parser.TimingLiteral:
	        case qasm3Parser.BitstringLiteral:
	            this.state = 555;
	            this.expression(0);
	            break;
	        case qasm3Parser.LBRACE:
	            this.state = 556;
	            this.arrayLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 566;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 559;
	                this.match(qasm3Parser.COMMA);
	                this.state = 562;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case qasm3Parser.BOOL:
	                case qasm3Parser.BIT:
	                case qasm3Parser.INT:
	                case qasm3Parser.UINT:
	                case qasm3Parser.FLOAT:
	                case qasm3Parser.ANGLE:
	                case qasm3Parser.COMPLEX:
	                case qasm3Parser.ARRAY:
	                case qasm3Parser.DURATION:
	                case qasm3Parser.STRETCH:
	                case qasm3Parser.DURATIONOF:
	                case qasm3Parser.BooleanLiteral:
	                case qasm3Parser.LPAREN:
	                case qasm3Parser.MINUS:
	                case qasm3Parser.TILDE:
	                case qasm3Parser.EXCLAMATION_POINT:
	                case qasm3Parser.ImaginaryLiteral:
	                case qasm3Parser.BinaryIntegerLiteral:
	                case qasm3Parser.OctalIntegerLiteral:
	                case qasm3Parser.DecimalIntegerLiteral:
	                case qasm3Parser.HexIntegerLiteral:
	                case qasm3Parser.Identifier:
	                case qasm3Parser.HardwareQubit:
	                case qasm3Parser.FloatLiteral:
	                case qasm3Parser.TimingLiteral:
	                case qasm3Parser.BitstringLiteral:
	                    this.state = 560;
	                    this.expression(0);
	                    break;
	                case qasm3Parser.LBRACE:
	                    this.state = 561;
	                    this.arrayLiteral();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 568;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	        this.state = 570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 569;
	            this.match(qasm3Parser.COMMA);
	        }

	        this.state = 572;
	        this.match(qasm3Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexOperator() {
	    let localctx = new IndexOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, qasm3Parser.RULE_indexOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this.match(qasm3Parser.LBRACKET);
	        this.state = 593;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.LBRACE:
	            this.state = 575;
	            this.setExpression();
	            break;
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.ARRAY:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	        case qasm3Parser.DURATIONOF:
	        case qasm3Parser.BooleanLiteral:
	        case qasm3Parser.LPAREN:
	        case qasm3Parser.COLON:
	        case qasm3Parser.MINUS:
	        case qasm3Parser.TILDE:
	        case qasm3Parser.EXCLAMATION_POINT:
	        case qasm3Parser.ImaginaryLiteral:
	        case qasm3Parser.BinaryIntegerLiteral:
	        case qasm3Parser.OctalIntegerLiteral:
	        case qasm3Parser.DecimalIntegerLiteral:
	        case qasm3Parser.HexIntegerLiteral:
	        case qasm3Parser.Identifier:
	        case qasm3Parser.HardwareQubit:
	        case qasm3Parser.FloatLiteral:
	        case qasm3Parser.TimingLiteral:
	        case qasm3Parser.BitstringLiteral:
	            this.state = 578;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 576;
	                this.expression(0);
	                break;

	            case 2:
	                this.state = 577;
	                this.rangeExpression();
	                break;

	            }
	            this.state = 587;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 580;
	                    this.match(qasm3Parser.COMMA);
	                    this.state = 583;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 581;
	                        this.expression(0);
	                        break;

	                    case 2:
	                        this.state = 582;
	                        this.rangeExpression();
	                        break;

	                    } 
	                }
	                this.state = 589;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
	            }

	            this.state = 591;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.COMMA) {
	                this.state = 590;
	                this.match(qasm3Parser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 595;
	        this.match(qasm3Parser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexedIdentifier() {
	    let localctx = new IndexedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, qasm3Parser.RULE_indexedIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 597;
	        this.match(qasm3Parser.Identifier);
	        this.state = 601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===qasm3Parser.LBRACKET) {
	            this.state = 598;
	            this.indexOperator();
	            this.state = 603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnSignature() {
	    let localctx = new ReturnSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, qasm3Parser.RULE_returnSignature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 604;
	        this.match(qasm3Parser.ARROW);
	        this.state = 605;
	        this.scalarType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gateModifier() {
	    let localctx = new GateModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, qasm3Parser.RULE_gateModifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.INV:
	            this.state = 607;
	            this.match(qasm3Parser.INV);
	            break;
	        case qasm3Parser.POW:
	            this.state = 608;
	            this.match(qasm3Parser.POW);
	            this.state = 609;
	            this.match(qasm3Parser.LPAREN);
	            this.state = 610;
	            this.expression(0);
	            this.state = 611;
	            this.match(qasm3Parser.RPAREN);
	            break;
	        case qasm3Parser.CTRL:
	        case qasm3Parser.NEGCTRL:
	            this.state = 613;
	            _la = this._input.LA(1);
	            if(!(_la===qasm3Parser.CTRL || _la===qasm3Parser.NEGCTRL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LPAREN) {
	                this.state = 614;
	                this.match(qasm3Parser.LPAREN);
	                this.state = 615;
	                this.expression(0);
	                this.state = 616;
	                this.match(qasm3Parser.RPAREN);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 622;
	        this.match(qasm3Parser.AT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalarType() {
	    let localctx = new ScalarTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, qasm3Parser.RULE_scalarType);
	    var _la = 0; // Token type
	    try {
	        this.state = 654;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.BIT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 624;
	            this.match(qasm3Parser.BIT);
	            this.state = 626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 625;
	                this.designator();
	            }

	            break;
	        case qasm3Parser.INT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 628;
	            this.match(qasm3Parser.INT);
	            this.state = 630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 629;
	                this.designator();
	            }

	            break;
	        case qasm3Parser.UINT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 632;
	            this.match(qasm3Parser.UINT);
	            this.state = 634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 633;
	                this.designator();
	            }

	            break;
	        case qasm3Parser.FLOAT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 636;
	            this.match(qasm3Parser.FLOAT);
	            this.state = 638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 637;
	                this.designator();
	            }

	            break;
	        case qasm3Parser.ANGLE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 640;
	            this.match(qasm3Parser.ANGLE);
	            this.state = 642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 641;
	                this.designator();
	            }

	            break;
	        case qasm3Parser.BOOL:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 644;
	            this.match(qasm3Parser.BOOL);
	            break;
	        case qasm3Parser.DURATION:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 645;
	            this.match(qasm3Parser.DURATION);
	            break;
	        case qasm3Parser.STRETCH:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 646;
	            this.match(qasm3Parser.STRETCH);
	            break;
	        case qasm3Parser.COMPLEX:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 647;
	            this.match(qasm3Parser.COMPLEX);
	            this.state = 652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 648;
	                this.match(qasm3Parser.LBRACKET);
	                this.state = 649;
	                this.scalarType();
	                this.state = 650;
	                this.match(qasm3Parser.RBRACKET);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qubitType() {
	    let localctx = new QubitTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, qasm3Parser.RULE_qubitType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        this.match(qasm3Parser.QUBIT);
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.LBRACKET) {
	            this.state = 657;
	            this.designator();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, qasm3Parser.RULE_arrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 660;
	        this.match(qasm3Parser.ARRAY);
	        this.state = 661;
	        this.match(qasm3Parser.LBRACKET);
	        this.state = 662;
	        this.scalarType();
	        this.state = 663;
	        this.match(qasm3Parser.COMMA);
	        this.state = 664;
	        this.expressionList();
	        this.state = 665;
	        this.match(qasm3Parser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayReferenceType() {
	    let localctx = new ArrayReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, qasm3Parser.RULE_arrayReferenceType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        _la = this._input.LA(1);
	        if(!(_la===qasm3Parser.CONST || _la===qasm3Parser.MUTABLE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 668;
	        this.match(qasm3Parser.ARRAY);
	        this.state = 669;
	        this.match(qasm3Parser.LBRACKET);
	        this.state = 670;
	        this.scalarType();
	        this.state = 671;
	        this.match(qasm3Parser.COMMA);
	        this.state = 676;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.ARRAY:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	        case qasm3Parser.DURATIONOF:
	        case qasm3Parser.BooleanLiteral:
	        case qasm3Parser.LPAREN:
	        case qasm3Parser.MINUS:
	        case qasm3Parser.TILDE:
	        case qasm3Parser.EXCLAMATION_POINT:
	        case qasm3Parser.ImaginaryLiteral:
	        case qasm3Parser.BinaryIntegerLiteral:
	        case qasm3Parser.OctalIntegerLiteral:
	        case qasm3Parser.DecimalIntegerLiteral:
	        case qasm3Parser.HexIntegerLiteral:
	        case qasm3Parser.Identifier:
	        case qasm3Parser.HardwareQubit:
	        case qasm3Parser.FloatLiteral:
	        case qasm3Parser.TimingLiteral:
	        case qasm3Parser.BitstringLiteral:
	            this.state = 672;
	            this.expressionList();
	            break;
	        case qasm3Parser.DIM:
	            this.state = 673;
	            this.match(qasm3Parser.DIM);
	            this.state = 674;
	            this.match(qasm3Parser.EQUALS);
	            this.state = 675;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 678;
	        this.match(qasm3Parser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	designator() {
	    let localctx = new DesignatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, qasm3Parser.RULE_designator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.match(qasm3Parser.LBRACKET);
	        this.state = 681;
	        this.expression(0);
	        this.state = 682;
	        this.match(qasm3Parser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defcalTarget() {
	    let localctx = new DefcalTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, qasm3Parser.RULE_defcalTarget);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        _la = this._input.LA(1);
	        if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (qasm3Parser.DELAY - 46)) | (1 << (qasm3Parser.RESET - 46)) | (1 << (qasm3Parser.MEASURE - 46)))) !== 0) || _la===qasm3Parser.Identifier)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defcalArgumentDefinition() {
	    let localctx = new DefcalArgumentDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, qasm3Parser.RULE_defcalArgumentDefinition);
	    try {
	        this.state = 688;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 686;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 687;
	            this.argumentDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defcalOperand() {
	    let localctx = new DefcalOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, qasm3Parser.RULE_defcalOperand);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 690;
	        _la = this._input.LA(1);
	        if(!(_la===qasm3Parser.Identifier || _la===qasm3Parser.HardwareQubit)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gateOperand() {
	    let localctx = new GateOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, qasm3Parser.RULE_gateOperand);
	    try {
	        this.state = 694;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 692;
	            this.indexedIdentifier();
	            break;
	        case qasm3Parser.HardwareQubit:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 693;
	            this.match(qasm3Parser.HardwareQubit);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externArgument() {
	    let localctx = new ExternArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, qasm3Parser.RULE_externArgument);
	    var _la = 0; // Token type
	    try {
	        this.state = 702;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 696;
	            this.scalarType();
	            break;
	        case qasm3Parser.CONST:
	        case qasm3Parser.MUTABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 697;
	            this.arrayReferenceType();
	            break;
	        case qasm3Parser.CREG:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 698;
	            this.match(qasm3Parser.CREG);
	            this.state = 700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 699;
	                this.designator();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentDefinition() {
	    let localctx = new ArgumentDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, qasm3Parser.RULE_argumentDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 718;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case qasm3Parser.BOOL:
	        case qasm3Parser.BIT:
	        case qasm3Parser.INT:
	        case qasm3Parser.UINT:
	        case qasm3Parser.FLOAT:
	        case qasm3Parser.ANGLE:
	        case qasm3Parser.COMPLEX:
	        case qasm3Parser.DURATION:
	        case qasm3Parser.STRETCH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 704;
	            this.scalarType();
	            this.state = 705;
	            this.match(qasm3Parser.Identifier);
	            break;
	        case qasm3Parser.QUBIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 707;
	            this.qubitType();
	            this.state = 708;
	            this.match(qasm3Parser.Identifier);
	            break;
	        case qasm3Parser.QREG:
	        case qasm3Parser.CREG:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 710;
	            _la = this._input.LA(1);
	            if(!(_la===qasm3Parser.QREG || _la===qasm3Parser.CREG)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 711;
	            this.match(qasm3Parser.Identifier);
	            this.state = 713;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===qasm3Parser.LBRACKET) {
	                this.state = 712;
	                this.designator();
	            }

	            break;
	        case qasm3Parser.CONST:
	        case qasm3Parser.MUTABLE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 715;
	            this.arrayReferenceType();
	            this.state = 716;
	            this.match(qasm3Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentDefinitionList() {
	    let localctx = new ArgumentDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, qasm3Parser.RULE_argumentDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 720;
	        this.argumentDefinition();
	        this.state = 725;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 721;
	                this.match(qasm3Parser.COMMA);
	                this.state = 722;
	                this.argumentDefinition(); 
	            }
	            this.state = 727;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	        this.state = 729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 728;
	            this.match(qasm3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defcalArgumentDefinitionList() {
	    let localctx = new DefcalArgumentDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, qasm3Parser.RULE_defcalArgumentDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731;
	        this.defcalArgumentDefinition();
	        this.state = 736;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 732;
	                this.match(qasm3Parser.COMMA);
	                this.state = 733;
	                this.defcalArgumentDefinition(); 
	            }
	            this.state = 738;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	        this.state = 740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 739;
	            this.match(qasm3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defcalOperandList() {
	    let localctx = new DefcalOperandListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, qasm3Parser.RULE_defcalOperandList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 742;
	        this.defcalOperand();
	        this.state = 747;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 743;
	                this.match(qasm3Parser.COMMA);
	                this.state = 744;
	                this.defcalOperand(); 
	            }
	            this.state = 749;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	        this.state = 751;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 750;
	            this.match(qasm3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, qasm3Parser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 753;
	        this.expression(0);
	        this.state = 758;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 754;
	                this.match(qasm3Parser.COMMA);
	                this.state = 755;
	                this.expression(0); 
	            }
	            this.state = 760;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 761;
	            this.match(qasm3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, qasm3Parser.RULE_identifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 764;
	        this.match(qasm3Parser.Identifier);
	        this.state = 769;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 765;
	                this.match(qasm3Parser.COMMA);
	                this.state = 766;
	                this.match(qasm3Parser.Identifier); 
	            }
	            this.state = 771;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	        this.state = 773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 772;
	            this.match(qasm3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gateOperandList() {
	    let localctx = new GateOperandListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, qasm3Parser.RULE_gateOperandList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.gateOperand();
	        this.state = 780;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 776;
	                this.match(qasm3Parser.COMMA);
	                this.state = 777;
	                this.gateOperand(); 
	            }
	            this.state = 782;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	        this.state = 784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 783;
	            this.match(qasm3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externArgumentList() {
	    let localctx = new ExternArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, qasm3Parser.RULE_externArgumentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 786;
	        this.externArgument();
	        this.state = 791;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 787;
	                this.match(qasm3Parser.COMMA);
	                this.state = 788;
	                this.externArgument(); 
	            }
	            this.state = 793;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
	        }

	        this.state = 795;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===qasm3Parser.COMMA) {
	            this.state = 794;
	            this.match(qasm3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

qasm3Parser.EOF = antlr4.Token.EOF;
qasm3Parser.OPENQASM = 1;
qasm3Parser.INCLUDE = 2;
qasm3Parser.DEFCALGRAMMAR = 3;
qasm3Parser.DEF = 4;
qasm3Parser.CAL = 5;
qasm3Parser.DEFCAL = 6;
qasm3Parser.GATE = 7;
qasm3Parser.EXTERN = 8;
qasm3Parser.BOX = 9;
qasm3Parser.LET = 10;
qasm3Parser.BREAK = 11;
qasm3Parser.CONTINUE = 12;
qasm3Parser.IF = 13;
qasm3Parser.ELSE = 14;
qasm3Parser.END = 15;
qasm3Parser.RETURN = 16;
qasm3Parser.FOR = 17;
qasm3Parser.WHILE = 18;
qasm3Parser.IN = 19;
qasm3Parser.PRAGMA = 20;
qasm3Parser.AnnotationKeyword = 21;
qasm3Parser.INPUT = 22;
qasm3Parser.OUTPUT = 23;
qasm3Parser.CONST = 24;
qasm3Parser.MUTABLE = 25;
qasm3Parser.QREG = 26;
qasm3Parser.QUBIT = 27;
qasm3Parser.CREG = 28;
qasm3Parser.BOOL = 29;
qasm3Parser.BIT = 30;
qasm3Parser.INT = 31;
qasm3Parser.UINT = 32;
qasm3Parser.FLOAT = 33;
qasm3Parser.ANGLE = 34;
qasm3Parser.COMPLEX = 35;
qasm3Parser.ARRAY = 36;
qasm3Parser.DURATION = 37;
qasm3Parser.STRETCH = 38;
qasm3Parser.GPHASE = 39;
qasm3Parser.INV = 40;
qasm3Parser.POW = 41;
qasm3Parser.CTRL = 42;
qasm3Parser.NEGCTRL = 43;
qasm3Parser.DIM = 44;
qasm3Parser.DURATIONOF = 45;
qasm3Parser.DELAY = 46;
qasm3Parser.RESET = 47;
qasm3Parser.MEASURE = 48;
qasm3Parser.BARRIER = 49;
qasm3Parser.BooleanLiteral = 50;
qasm3Parser.LBRACKET = 51;
qasm3Parser.RBRACKET = 52;
qasm3Parser.LBRACE = 53;
qasm3Parser.RBRACE = 54;
qasm3Parser.LPAREN = 55;
qasm3Parser.RPAREN = 56;
qasm3Parser.COLON = 57;
qasm3Parser.SEMICOLON = 58;
qasm3Parser.DOT = 59;
qasm3Parser.COMMA = 60;
qasm3Parser.EQUALS = 61;
qasm3Parser.ARROW = 62;
qasm3Parser.PLUS = 63;
qasm3Parser.DOUBLE_PLUS = 64;
qasm3Parser.MINUS = 65;
qasm3Parser.ASTERISK = 66;
qasm3Parser.DOUBLE_ASTERISK = 67;
qasm3Parser.SLASH = 68;
qasm3Parser.PERCENT = 69;
qasm3Parser.PIPE = 70;
qasm3Parser.DOUBLE_PIPE = 71;
qasm3Parser.AMPERSAND = 72;
qasm3Parser.DOUBLE_AMPERSAND = 73;
qasm3Parser.CARET = 74;
qasm3Parser.AT = 75;
qasm3Parser.TILDE = 76;
qasm3Parser.EXCLAMATION_POINT = 77;
qasm3Parser.EqualityOperator = 78;
qasm3Parser.CompoundAssignmentOperator = 79;
qasm3Parser.ComparisonOperator = 80;
qasm3Parser.BitshiftOperator = 81;
qasm3Parser.IMAG = 82;
qasm3Parser.ImaginaryLiteral = 83;
qasm3Parser.BinaryIntegerLiteral = 84;
qasm3Parser.OctalIntegerLiteral = 85;
qasm3Parser.DecimalIntegerLiteral = 86;
qasm3Parser.HexIntegerLiteral = 87;
qasm3Parser.Identifier = 88;
qasm3Parser.HardwareQubit = 89;
qasm3Parser.FloatLiteral = 90;
qasm3Parser.TimingLiteral = 91;
qasm3Parser.BitstringLiteral = 92;
qasm3Parser.StringLiteral = 93;
qasm3Parser.Whitespace = 94;
qasm3Parser.Newline = 95;
qasm3Parser.LineComment = 96;
qasm3Parser.BlockComment = 97;
qasm3Parser.VERSION_IDENTIFER_WHITESPACE = 98;
qasm3Parser.VersionSpecifier = 99;
qasm3Parser.EAT_INITIAL_SPACE = 100;
qasm3Parser.EAT_LINE_END = 101;
qasm3Parser.RemainingLineContent = 102;
qasm3Parser.CAL_PRELUDE_WHITESPACE = 103;
qasm3Parser.CAL_PRELUDE_COMMENT = 104;
qasm3Parser.DEFCAL_PRELUDE_WHITESPACE = 105;
qasm3Parser.DEFCAL_PRELUDE_COMMENT = 106;
qasm3Parser.CalibrationBlock = 107;

qasm3Parser.RULE_program = 0;
qasm3Parser.RULE_version = 1;
qasm3Parser.RULE_statement = 2;
qasm3Parser.RULE_annotation = 3;
qasm3Parser.RULE_scope = 4;
qasm3Parser.RULE_pragma = 5;
qasm3Parser.RULE_statementOrScope = 6;
qasm3Parser.RULE_calibrationGrammarStatement = 7;
qasm3Parser.RULE_includeStatement = 8;
qasm3Parser.RULE_breakStatement = 9;
qasm3Parser.RULE_continueStatement = 10;
qasm3Parser.RULE_endStatement = 11;
qasm3Parser.RULE_forStatement = 12;
qasm3Parser.RULE_ifStatement = 13;
qasm3Parser.RULE_returnStatement = 14;
qasm3Parser.RULE_whileStatement = 15;
qasm3Parser.RULE_barrierStatement = 16;
qasm3Parser.RULE_boxStatement = 17;
qasm3Parser.RULE_delayStatement = 18;
qasm3Parser.RULE_gateCallStatement = 19;
qasm3Parser.RULE_measureArrowAssignmentStatement = 20;
qasm3Parser.RULE_resetStatement = 21;
qasm3Parser.RULE_aliasDeclarationStatement = 22;
qasm3Parser.RULE_classicalDeclarationStatement = 23;
qasm3Parser.RULE_constDeclarationStatement = 24;
qasm3Parser.RULE_ioDeclarationStatement = 25;
qasm3Parser.RULE_oldStyleDeclarationStatement = 26;
qasm3Parser.RULE_quantumDeclarationStatement = 27;
qasm3Parser.RULE_defStatement = 28;
qasm3Parser.RULE_externStatement = 29;
qasm3Parser.RULE_gateStatement = 30;
qasm3Parser.RULE_assignmentStatement = 31;
qasm3Parser.RULE_expressionStatement = 32;
qasm3Parser.RULE_calStatement = 33;
qasm3Parser.RULE_defcalStatement = 34;
qasm3Parser.RULE_expression = 35;
qasm3Parser.RULE_aliasExpression = 36;
qasm3Parser.RULE_declarationExpression = 37;
qasm3Parser.RULE_measureExpression = 38;
qasm3Parser.RULE_rangeExpression = 39;
qasm3Parser.RULE_setExpression = 40;
qasm3Parser.RULE_arrayLiteral = 41;
qasm3Parser.RULE_indexOperator = 42;
qasm3Parser.RULE_indexedIdentifier = 43;
qasm3Parser.RULE_returnSignature = 44;
qasm3Parser.RULE_gateModifier = 45;
qasm3Parser.RULE_scalarType = 46;
qasm3Parser.RULE_qubitType = 47;
qasm3Parser.RULE_arrayType = 48;
qasm3Parser.RULE_arrayReferenceType = 49;
qasm3Parser.RULE_designator = 50;
qasm3Parser.RULE_defcalTarget = 51;
qasm3Parser.RULE_defcalArgumentDefinition = 52;
qasm3Parser.RULE_defcalOperand = 53;
qasm3Parser.RULE_gateOperand = 54;
qasm3Parser.RULE_externArgument = 55;
qasm3Parser.RULE_argumentDefinition = 56;
qasm3Parser.RULE_argumentDefinitionList = 57;
qasm3Parser.RULE_defcalArgumentDefinitionList = 58;
qasm3Parser.RULE_defcalOperandList = 59;
qasm3Parser.RULE_expressionList = 60;
qasm3Parser.RULE_identifierList = 61;
qasm3Parser.RULE_gateOperandList = 62;
qasm3Parser.RULE_externArgumentList = 63;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_program;
    }

	EOF() {
	    return this.getToken(qasm3Parser.EOF, 0);
	};

	version() {
	    return this.getTypedRuleContext(VersionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VersionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_version;
    }

	OPENQASM() {
	    return this.getToken(qasm3Parser.OPENQASM, 0);
	};

	VersionSpecifier() {
	    return this.getToken(qasm3Parser.VersionSpecifier, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterVersion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitVersion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitVersion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_statement;
    }

	pragma() {
	    return this.getTypedRuleContext(PragmaContext,0);
	};

	aliasDeclarationStatement() {
	    return this.getTypedRuleContext(AliasDeclarationStatementContext,0);
	};

	assignmentStatement() {
	    return this.getTypedRuleContext(AssignmentStatementContext,0);
	};

	barrierStatement() {
	    return this.getTypedRuleContext(BarrierStatementContext,0);
	};

	boxStatement() {
	    return this.getTypedRuleContext(BoxStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	calStatement() {
	    return this.getTypedRuleContext(CalStatementContext,0);
	};

	calibrationGrammarStatement() {
	    return this.getTypedRuleContext(CalibrationGrammarStatementContext,0);
	};

	classicalDeclarationStatement() {
	    return this.getTypedRuleContext(ClassicalDeclarationStatementContext,0);
	};

	constDeclarationStatement() {
	    return this.getTypedRuleContext(ConstDeclarationStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	defStatement() {
	    return this.getTypedRuleContext(DefStatementContext,0);
	};

	defcalStatement() {
	    return this.getTypedRuleContext(DefcalStatementContext,0);
	};

	delayStatement() {
	    return this.getTypedRuleContext(DelayStatementContext,0);
	};

	endStatement() {
	    return this.getTypedRuleContext(EndStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	externStatement() {
	    return this.getTypedRuleContext(ExternStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	gateCallStatement() {
	    return this.getTypedRuleContext(GateCallStatementContext,0);
	};

	gateStatement() {
	    return this.getTypedRuleContext(GateStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	includeStatement() {
	    return this.getTypedRuleContext(IncludeStatementContext,0);
	};

	ioDeclarationStatement() {
	    return this.getTypedRuleContext(IoDeclarationStatementContext,0);
	};

	measureArrowAssignmentStatement() {
	    return this.getTypedRuleContext(MeasureArrowAssignmentStatementContext,0);
	};

	oldStyleDeclarationStatement() {
	    return this.getTypedRuleContext(OldStyleDeclarationStatementContext,0);
	};

	quantumDeclarationStatement() {
	    return this.getTypedRuleContext(QuantumDeclarationStatementContext,0);
	};

	resetStatement() {
	    return this.getTypedRuleContext(ResetStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_annotation;
    }

	AnnotationKeyword() {
	    return this.getToken(qasm3Parser.AnnotationKeyword, 0);
	};

	RemainingLineContent() {
	    return this.getToken(qasm3Parser.RemainingLineContent, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_scope;
    }

	LBRACE() {
	    return this.getToken(qasm3Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(qasm3Parser.RBRACE, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitScope(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitScope(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PragmaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_pragma;
    }

	PRAGMA() {
	    return this.getToken(qasm3Parser.PRAGMA, 0);
	};

	RemainingLineContent() {
	    return this.getToken(qasm3Parser.RemainingLineContent, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterPragma(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitPragma(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitPragma(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementOrScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_statementOrScope;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	scope() {
	    return this.getTypedRuleContext(ScopeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterStatementOrScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitStatementOrScope(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitStatementOrScope(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CalibrationGrammarStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_calibrationGrammarStatement;
    }

	DEFCALGRAMMAR() {
	    return this.getToken(qasm3Parser.DEFCALGRAMMAR, 0);
	};

	StringLiteral() {
	    return this.getToken(qasm3Parser.StringLiteral, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterCalibrationGrammarStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitCalibrationGrammarStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitCalibrationGrammarStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IncludeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_includeStatement;
    }

	INCLUDE() {
	    return this.getToken(qasm3Parser.INCLUDE, 0);
	};

	StringLiteral() {
	    return this.getToken(qasm3Parser.StringLiteral, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterIncludeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitIncludeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitIncludeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_breakStatement;
    }

	BREAK() {
	    return this.getToken(qasm3Parser.BREAK, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(qasm3Parser.CONTINUE, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EndStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_endStatement;
    }

	END() {
	    return this.getToken(qasm3Parser.END, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterEndStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitEndStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitEndStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_forStatement;
        this.body = null; // StatementOrScopeContext
    }

	FOR() {
	    return this.getToken(qasm3Parser.FOR, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.Identifier);
	    } else {
	        return this.getToken(qasm3Parser.Identifier, i);
	    }
	};


	IN() {
	    return this.getToken(qasm3Parser.IN, 0);
	};

	statementOrScope() {
	    return this.getTypedRuleContext(StatementOrScopeContext,0);
	};

	setExpression() {
	    return this.getTypedRuleContext(SetExpressionContext,0);
	};

	LBRACKET() {
	    return this.getToken(qasm3Parser.LBRACKET, 0);
	};

	rangeExpression() {
	    return this.getTypedRuleContext(RangeExpressionContext,0);
	};

	RBRACKET() {
	    return this.getToken(qasm3Parser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_ifStatement;
        this.if_body = null; // StatementOrScopeContext
        this.else_body = null; // StatementOrScopeContext
    }

	IF() {
	    return this.getToken(qasm3Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	statementOrScope = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementOrScopeContext);
	    } else {
	        return this.getTypedRuleContext(StatementOrScopeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(qasm3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(qasm3Parser.RETURN, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	measureExpression() {
	    return this.getTypedRuleContext(MeasureExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_whileStatement;
        this.body = null; // StatementOrScopeContext
    }

	WHILE() {
	    return this.getToken(qasm3Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	statementOrScope() {
	    return this.getTypedRuleContext(StatementOrScopeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BarrierStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_barrierStatement;
    }

	BARRIER() {
	    return this.getToken(qasm3Parser.BARRIER, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	gateOperandList() {
	    return this.getTypedRuleContext(GateOperandListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterBarrierStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitBarrierStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitBarrierStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BoxStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_boxStatement;
    }

	BOX() {
	    return this.getToken(qasm3Parser.BOX, 0);
	};

	scope() {
	    return this.getTypedRuleContext(ScopeContext,0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterBoxStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitBoxStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitBoxStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DelayStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_delayStatement;
    }

	DELAY() {
	    return this.getToken(qasm3Parser.DELAY, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	gateOperandList() {
	    return this.getTypedRuleContext(GateOperandListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDelayStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDelayStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDelayStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GateCallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_gateCallStatement;
    }

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	gateOperandList() {
	    return this.getTypedRuleContext(GateOperandListContext,0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	gateModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GateModifierContext);
	    } else {
	        return this.getTypedRuleContext(GateModifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	GPHASE() {
	    return this.getToken(qasm3Parser.GPHASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterGateCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitGateCallStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitGateCallStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MeasureArrowAssignmentStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_measureArrowAssignmentStatement;
    }

	measureExpression() {
	    return this.getTypedRuleContext(MeasureExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	ARROW() {
	    return this.getToken(qasm3Parser.ARROW, 0);
	};

	indexedIdentifier() {
	    return this.getTypedRuleContext(IndexedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterMeasureArrowAssignmentStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitMeasureArrowAssignmentStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitMeasureArrowAssignmentStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_resetStatement;
    }

	RESET() {
	    return this.getToken(qasm3Parser.RESET, 0);
	};

	gateOperand() {
	    return this.getTypedRuleContext(GateOperandContext,0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterResetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitResetStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitResetStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_aliasDeclarationStatement;
    }

	LET() {
	    return this.getToken(qasm3Parser.LET, 0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	EQUALS() {
	    return this.getToken(qasm3Parser.EQUALS, 0);
	};

	aliasExpression() {
	    return this.getTypedRuleContext(AliasExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterAliasDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitAliasDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitAliasDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassicalDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_classicalDeclarationStatement;
    }

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	EQUALS() {
	    return this.getToken(qasm3Parser.EQUALS, 0);
	};

	declarationExpression() {
	    return this.getTypedRuleContext(DeclarationExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterClassicalDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitClassicalDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitClassicalDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_constDeclarationStatement;
    }

	CONST() {
	    return this.getToken(qasm3Parser.CONST, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	EQUALS() {
	    return this.getToken(qasm3Parser.EQUALS, 0);
	};

	declarationExpression() {
	    return this.getTypedRuleContext(DeclarationExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterConstDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitConstDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitConstDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IoDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_ioDeclarationStatement;
    }

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	INPUT() {
	    return this.getToken(qasm3Parser.INPUT, 0);
	};

	OUTPUT() {
	    return this.getToken(qasm3Parser.OUTPUT, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterIoDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitIoDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitIoDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OldStyleDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_oldStyleDeclarationStatement;
    }

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	CREG() {
	    return this.getToken(qasm3Parser.CREG, 0);
	};

	QREG() {
	    return this.getToken(qasm3Parser.QREG, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterOldStyleDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitOldStyleDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitOldStyleDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuantumDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_quantumDeclarationStatement;
    }

	qubitType() {
	    return this.getTypedRuleContext(QubitTypeContext,0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterQuantumDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitQuantumDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitQuantumDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_defStatement;
    }

	DEF() {
	    return this.getToken(qasm3Parser.DEF, 0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	scope() {
	    return this.getTypedRuleContext(ScopeContext,0);
	};

	argumentDefinitionList() {
	    return this.getTypedRuleContext(ArgumentDefinitionListContext,0);
	};

	returnSignature() {
	    return this.getTypedRuleContext(ReturnSignatureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDefStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDefStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDefStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_externStatement;
    }

	EXTERN() {
	    return this.getToken(qasm3Parser.EXTERN, 0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	externArgumentList() {
	    return this.getTypedRuleContext(ExternArgumentListContext,0);
	};

	returnSignature() {
	    return this.getTypedRuleContext(ReturnSignatureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterExternStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitExternStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitExternStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_gateStatement;
        this.params = null; // IdentifierListContext
        this.qubits = null; // IdentifierListContext
    }

	GATE() {
	    return this.getToken(qasm3Parser.GATE, 0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	scope() {
	    return this.getTypedRuleContext(ScopeContext,0);
	};

	identifierList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierListContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierListContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterGateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitGateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitGateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_assignmentStatement;
        this.op = null; // Token
    }

	indexedIdentifier() {
	    return this.getTypedRuleContext(IndexedIdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	EQUALS() {
	    return this.getToken(qasm3Parser.EQUALS, 0);
	};

	CompoundAssignmentOperator() {
	    return this.getToken(qasm3Parser.CompoundAssignmentOperator, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	measureExpression() {
	    return this.getTypedRuleContext(MeasureExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterAssignmentStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitAssignmentStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitAssignmentStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_expressionStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(qasm3Parser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_calStatement;
    }

	CAL() {
	    return this.getToken(qasm3Parser.CAL, 0);
	};

	LBRACE() {
	    return this.getToken(qasm3Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(qasm3Parser.RBRACE, 0);
	};

	CalibrationBlock() {
	    return this.getToken(qasm3Parser.CalibrationBlock, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterCalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitCalStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitCalStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefcalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_defcalStatement;
    }

	DEFCAL() {
	    return this.getToken(qasm3Parser.DEFCAL, 0);
	};

	defcalTarget() {
	    return this.getTypedRuleContext(DefcalTargetContext,0);
	};

	defcalOperandList() {
	    return this.getTypedRuleContext(DefcalOperandListContext,0);
	};

	LBRACE() {
	    return this.getToken(qasm3Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(qasm3Parser.RBRACE, 0);
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	returnSignature() {
	    return this.getTypedRuleContext(ReturnSignatureContext,0);
	};

	CalibrationBlock() {
	    return this.getToken(qasm3Parser.CalibrationBlock, 0);
	};

	defcalArgumentDefinitionList() {
	    return this.getTypedRuleContext(DefcalArgumentDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDefcalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDefcalStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDefcalStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BitwiseXorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	CARET() {
	    return this.getToken(qasm3Parser.CARET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterBitwiseXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitBitwiseXorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitBitwiseXorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.BitwiseXorExpressionContext = BitwiseXorExpressionContext;

class AdditiveExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(qasm3Parser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(qasm3Parser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.AdditiveExpressionContext = AdditiveExpressionContext;

class DurationofExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DURATIONOF() {
	    return this.getToken(qasm3Parser.DURATIONOF, 0);
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	scope() {
	    return this.getTypedRuleContext(ScopeContext,0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDurationofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDurationofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDurationofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.DurationofExpressionContext = DurationofExpressionContext;

class ParenthesisExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterParenthesisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitParenthesisExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitParenthesisExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.ParenthesisExpressionContext = ParenthesisExpressionContext;

class ComparisonExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ComparisonOperator() {
	    return this.getToken(qasm3Parser.ComparisonOperator, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitComparisonExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitComparisonExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.ComparisonExpressionContext = ComparisonExpressionContext;

class MultiplicativeExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ASTERISK() {
	    return this.getToken(qasm3Parser.ASTERISK, 0);
	};

	SLASH() {
	    return this.getToken(qasm3Parser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(qasm3Parser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class LogicalOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DOUBLE_PIPE() {
	    return this.getToken(qasm3Parser.DOUBLE_PIPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class CastExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.CastExpressionContext = CastExpressionContext;

class PowerExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DOUBLE_ASTERISK() {
	    return this.getToken(qasm3Parser.DOUBLE_ASTERISK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterPowerExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitPowerExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitPowerExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.PowerExpressionContext = PowerExpressionContext;

class BitwiseOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	PIPE() {
	    return this.getToken(qasm3Parser.PIPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterBitwiseOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitBitwiseOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitBitwiseOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.BitwiseOrExpressionContext = BitwiseOrExpressionContext;

class CallExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitCallExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitCallExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.CallExpressionContext = CallExpressionContext;

class BitshiftExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	BitshiftOperator() {
	    return this.getToken(qasm3Parser.BitshiftOperator, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterBitshiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitBitshiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitBitshiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.BitshiftExpressionContext = BitshiftExpressionContext;

class BitwiseAndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AMPERSAND() {
	    return this.getToken(qasm3Parser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterBitwiseAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitBitwiseAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitBitwiseAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.BitwiseAndExpressionContext = BitwiseAndExpressionContext;

class EqualityExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EqualityOperator() {
	    return this.getToken(qasm3Parser.EqualityOperator, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.EqualityExpressionContext = EqualityExpressionContext;

class LogicalAndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DOUBLE_AMPERSAND() {
	    return this.getToken(qasm3Parser.DOUBLE_AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class IndexExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	indexOperator() {
	    return this.getTypedRuleContext(IndexOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterIndexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitIndexExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.IndexExpressionContext = IndexExpressionContext;

class UnaryExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	TILDE() {
	    return this.getToken(qasm3Parser.TILDE, 0);
	};

	EXCLAMATION_POINT() {
	    return this.getToken(qasm3Parser.EXCLAMATION_POINT, 0);
	};

	MINUS() {
	    return this.getToken(qasm3Parser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitUnaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.UnaryExpressionContext = UnaryExpressionContext;

class LiteralExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	BinaryIntegerLiteral() {
	    return this.getToken(qasm3Parser.BinaryIntegerLiteral, 0);
	};

	OctalIntegerLiteral() {
	    return this.getToken(qasm3Parser.OctalIntegerLiteral, 0);
	};

	DecimalIntegerLiteral() {
	    return this.getToken(qasm3Parser.DecimalIntegerLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(qasm3Parser.HexIntegerLiteral, 0);
	};

	FloatLiteral() {
	    return this.getToken(qasm3Parser.FloatLiteral, 0);
	};

	ImaginaryLiteral() {
	    return this.getToken(qasm3Parser.ImaginaryLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(qasm3Parser.BooleanLiteral, 0);
	};

	BitstringLiteral() {
	    return this.getToken(qasm3Parser.BitstringLiteral, 0);
	};

	TimingLiteral() {
	    return this.getToken(qasm3Parser.TimingLiteral, 0);
	};

	HardwareQubit() {
	    return this.getToken(qasm3Parser.HardwareQubit, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

qasm3Parser.LiteralExpressionContext = LiteralExpressionContext;

class AliasExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_aliasExpression;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DOUBLE_PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.DOUBLE_PLUS);
	    } else {
	        return this.getToken(qasm3Parser.DOUBLE_PLUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterAliasExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitAliasExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitAliasExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_declarationExpression;
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	measureExpression() {
	    return this.getTypedRuleContext(MeasureExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDeclarationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDeclarationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDeclarationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MeasureExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_measureExpression;
    }

	MEASURE() {
	    return this.getToken(qasm3Parser.MEASURE, 0);
	};

	gateOperand() {
	    return this.getTypedRuleContext(GateOperandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterMeasureExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitMeasureExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitMeasureExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_rangeExpression;
    }

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COLON);
	    } else {
	        return this.getToken(qasm3Parser.COLON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterRangeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitRangeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitRangeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_setExpression;
    }

	LBRACE() {
	    return this.getToken(qasm3Parser.LBRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(qasm3Parser.RBRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterSetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitSetExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitSetExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_arrayLiteral;
    }

	LBRACE() {
	    return this.getToken(qasm3Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(qasm3Parser.RBRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	arrayLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayLiteralContext);
	    } else {
	        return this.getTypedRuleContext(ArrayLiteralContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterArrayLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitArrayLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_indexOperator;
    }

	LBRACKET() {
	    return this.getToken(qasm3Parser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(qasm3Parser.RBRACKET, 0);
	};

	setExpression() {
	    return this.getTypedRuleContext(SetExpressionContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	rangeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RangeExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterIndexOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitIndexOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitIndexOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_indexedIdentifier;
    }

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	indexOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOperatorContext);
	    } else {
	        return this.getTypedRuleContext(IndexOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterIndexedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitIndexedIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitIndexedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_returnSignature;
    }

	ARROW() {
	    return this.getToken(qasm3Parser.ARROW, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterReturnSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitReturnSignature(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitReturnSignature(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GateModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_gateModifier;
    }

	AT() {
	    return this.getToken(qasm3Parser.AT, 0);
	};

	INV() {
	    return this.getToken(qasm3Parser.INV, 0);
	};

	POW() {
	    return this.getToken(qasm3Parser.POW, 0);
	};

	LPAREN() {
	    return this.getToken(qasm3Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(qasm3Parser.RPAREN, 0);
	};

	CTRL() {
	    return this.getToken(qasm3Parser.CTRL, 0);
	};

	NEGCTRL() {
	    return this.getToken(qasm3Parser.NEGCTRL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterGateModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitGateModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitGateModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScalarTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_scalarType;
    }

	BIT() {
	    return this.getToken(qasm3Parser.BIT, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	INT() {
	    return this.getToken(qasm3Parser.INT, 0);
	};

	UINT() {
	    return this.getToken(qasm3Parser.UINT, 0);
	};

	FLOAT() {
	    return this.getToken(qasm3Parser.FLOAT, 0);
	};

	ANGLE() {
	    return this.getToken(qasm3Parser.ANGLE, 0);
	};

	BOOL() {
	    return this.getToken(qasm3Parser.BOOL, 0);
	};

	DURATION() {
	    return this.getToken(qasm3Parser.DURATION, 0);
	};

	STRETCH() {
	    return this.getToken(qasm3Parser.STRETCH, 0);
	};

	COMPLEX() {
	    return this.getToken(qasm3Parser.COMPLEX, 0);
	};

	LBRACKET() {
	    return this.getToken(qasm3Parser.LBRACKET, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	RBRACKET() {
	    return this.getToken(qasm3Parser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterScalarType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitScalarType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitScalarType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QubitTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_qubitType;
    }

	QUBIT() {
	    return this.getToken(qasm3Parser.QUBIT, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterQubitType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitQubitType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitQubitType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_arrayType;
    }

	ARRAY() {
	    return this.getToken(qasm3Parser.ARRAY, 0);
	};

	LBRACKET() {
	    return this.getToken(qasm3Parser.LBRACKET, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	COMMA() {
	    return this.getToken(qasm3Parser.COMMA, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	RBRACKET() {
	    return this.getToken(qasm3Parser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitArrayType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitArrayType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_arrayReferenceType;
    }

	ARRAY() {
	    return this.getToken(qasm3Parser.ARRAY, 0);
	};

	LBRACKET() {
	    return this.getToken(qasm3Parser.LBRACKET, 0);
	};

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	COMMA() {
	    return this.getToken(qasm3Parser.COMMA, 0);
	};

	RBRACKET() {
	    return this.getToken(qasm3Parser.RBRACKET, 0);
	};

	CONST() {
	    return this.getToken(qasm3Parser.CONST, 0);
	};

	MUTABLE() {
	    return this.getToken(qasm3Parser.MUTABLE, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	DIM() {
	    return this.getToken(qasm3Parser.DIM, 0);
	};

	EQUALS() {
	    return this.getToken(qasm3Parser.EQUALS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterArrayReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitArrayReferenceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitArrayReferenceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DesignatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_designator;
    }

	LBRACKET() {
	    return this.getToken(qasm3Parser.LBRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACKET() {
	    return this.getToken(qasm3Parser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDesignator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDesignator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDesignator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefcalTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_defcalTarget;
    }

	MEASURE() {
	    return this.getToken(qasm3Parser.MEASURE, 0);
	};

	RESET() {
	    return this.getToken(qasm3Parser.RESET, 0);
	};

	DELAY() {
	    return this.getToken(qasm3Parser.DELAY, 0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDefcalTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDefcalTarget(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDefcalTarget(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefcalArgumentDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_defcalArgumentDefinition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	argumentDefinition() {
	    return this.getTypedRuleContext(ArgumentDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDefcalArgumentDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDefcalArgumentDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDefcalArgumentDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefcalOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_defcalOperand;
    }

	HardwareQubit() {
	    return this.getToken(qasm3Parser.HardwareQubit, 0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDefcalOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDefcalOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDefcalOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GateOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_gateOperand;
    }

	indexedIdentifier() {
	    return this.getTypedRuleContext(IndexedIdentifierContext,0);
	};

	HardwareQubit() {
	    return this.getToken(qasm3Parser.HardwareQubit, 0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterGateOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitGateOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitGateOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_externArgument;
    }

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	arrayReferenceType() {
	    return this.getTypedRuleContext(ArrayReferenceTypeContext,0);
	};

	CREG() {
	    return this.getToken(qasm3Parser.CREG, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterExternArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitExternArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitExternArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_argumentDefinition;
    }

	scalarType() {
	    return this.getTypedRuleContext(ScalarTypeContext,0);
	};

	Identifier() {
	    return this.getToken(qasm3Parser.Identifier, 0);
	};

	qubitType() {
	    return this.getTypedRuleContext(QubitTypeContext,0);
	};

	CREG() {
	    return this.getToken(qasm3Parser.CREG, 0);
	};

	QREG() {
	    return this.getToken(qasm3Parser.QREG, 0);
	};

	designator() {
	    return this.getTypedRuleContext(DesignatorContext,0);
	};

	arrayReferenceType() {
	    return this.getTypedRuleContext(ArrayReferenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterArgumentDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitArgumentDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitArgumentDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_argumentDefinitionList;
    }

	argumentDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterArgumentDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitArgumentDefinitionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitArgumentDefinitionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefcalArgumentDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_defcalArgumentDefinitionList;
    }

	defcalArgumentDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefcalArgumentDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(DefcalArgumentDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDefcalArgumentDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDefcalArgumentDefinitionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDefcalArgumentDefinitionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefcalOperandListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_defcalOperandList;
    }

	defcalOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefcalOperandContext);
	    } else {
	        return this.getTypedRuleContext(DefcalOperandContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterDefcalOperandList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitDefcalOperandList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitDefcalOperandList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_identifierList;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.Identifier);
	    } else {
	        return this.getToken(qasm3Parser.Identifier, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitIdentifierList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GateOperandListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_gateOperandList;
    }

	gateOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GateOperandContext);
	    } else {
	        return this.getTypedRuleContext(GateOperandContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterGateOperandList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitGateOperandList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitGateOperandList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = qasm3Parser.RULE_externArgumentList;
    }

	externArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExternArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ExternArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(qasm3Parser.COMMA);
	    } else {
	        return this.getToken(qasm3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.enterExternArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof qasm3ParserListener ) {
	        listener.exitExternArgumentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof qasm3ParserVisitor ) {
	        return visitor.visitExternArgumentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




qasm3Parser.ProgramContext = ProgramContext; 
qasm3Parser.VersionContext = VersionContext; 
qasm3Parser.StatementContext = StatementContext; 
qasm3Parser.AnnotationContext = AnnotationContext; 
qasm3Parser.ScopeContext = ScopeContext; 
qasm3Parser.PragmaContext = PragmaContext; 
qasm3Parser.StatementOrScopeContext = StatementOrScopeContext; 
qasm3Parser.CalibrationGrammarStatementContext = CalibrationGrammarStatementContext; 
qasm3Parser.IncludeStatementContext = IncludeStatementContext; 
qasm3Parser.BreakStatementContext = BreakStatementContext; 
qasm3Parser.ContinueStatementContext = ContinueStatementContext; 
qasm3Parser.EndStatementContext = EndStatementContext; 
qasm3Parser.ForStatementContext = ForStatementContext; 
qasm3Parser.IfStatementContext = IfStatementContext; 
qasm3Parser.ReturnStatementContext = ReturnStatementContext; 
qasm3Parser.WhileStatementContext = WhileStatementContext; 
qasm3Parser.BarrierStatementContext = BarrierStatementContext; 
qasm3Parser.BoxStatementContext = BoxStatementContext; 
qasm3Parser.DelayStatementContext = DelayStatementContext; 
qasm3Parser.GateCallStatementContext = GateCallStatementContext; 
qasm3Parser.MeasureArrowAssignmentStatementContext = MeasureArrowAssignmentStatementContext; 
qasm3Parser.ResetStatementContext = ResetStatementContext; 
qasm3Parser.AliasDeclarationStatementContext = AliasDeclarationStatementContext; 
qasm3Parser.ClassicalDeclarationStatementContext = ClassicalDeclarationStatementContext; 
qasm3Parser.ConstDeclarationStatementContext = ConstDeclarationStatementContext; 
qasm3Parser.IoDeclarationStatementContext = IoDeclarationStatementContext; 
qasm3Parser.OldStyleDeclarationStatementContext = OldStyleDeclarationStatementContext; 
qasm3Parser.QuantumDeclarationStatementContext = QuantumDeclarationStatementContext; 
qasm3Parser.DefStatementContext = DefStatementContext; 
qasm3Parser.ExternStatementContext = ExternStatementContext; 
qasm3Parser.GateStatementContext = GateStatementContext; 
qasm3Parser.AssignmentStatementContext = AssignmentStatementContext; 
qasm3Parser.ExpressionStatementContext = ExpressionStatementContext; 
qasm3Parser.CalStatementContext = CalStatementContext; 
qasm3Parser.DefcalStatementContext = DefcalStatementContext; 
qasm3Parser.ExpressionContext = ExpressionContext; 
qasm3Parser.AliasExpressionContext = AliasExpressionContext; 
qasm3Parser.DeclarationExpressionContext = DeclarationExpressionContext; 
qasm3Parser.MeasureExpressionContext = MeasureExpressionContext; 
qasm3Parser.RangeExpressionContext = RangeExpressionContext; 
qasm3Parser.SetExpressionContext = SetExpressionContext; 
qasm3Parser.ArrayLiteralContext = ArrayLiteralContext; 
qasm3Parser.IndexOperatorContext = IndexOperatorContext; 
qasm3Parser.IndexedIdentifierContext = IndexedIdentifierContext; 
qasm3Parser.ReturnSignatureContext = ReturnSignatureContext; 
qasm3Parser.GateModifierContext = GateModifierContext; 
qasm3Parser.ScalarTypeContext = ScalarTypeContext; 
qasm3Parser.QubitTypeContext = QubitTypeContext; 
qasm3Parser.ArrayTypeContext = ArrayTypeContext; 
qasm3Parser.ArrayReferenceTypeContext = ArrayReferenceTypeContext; 
qasm3Parser.DesignatorContext = DesignatorContext; 
qasm3Parser.DefcalTargetContext = DefcalTargetContext; 
qasm3Parser.DefcalArgumentDefinitionContext = DefcalArgumentDefinitionContext; 
qasm3Parser.DefcalOperandContext = DefcalOperandContext; 
qasm3Parser.GateOperandContext = GateOperandContext; 
qasm3Parser.ExternArgumentContext = ExternArgumentContext; 
qasm3Parser.ArgumentDefinitionContext = ArgumentDefinitionContext; 
qasm3Parser.ArgumentDefinitionListContext = ArgumentDefinitionListContext; 
qasm3Parser.DefcalArgumentDefinitionListContext = DefcalArgumentDefinitionListContext; 
qasm3Parser.DefcalOperandListContext = DefcalOperandListContext; 
qasm3Parser.ExpressionListContext = ExpressionListContext; 
qasm3Parser.IdentifierListContext = IdentifierListContext; 
qasm3Parser.GateOperandListContext = GateOperandListContext; 
qasm3Parser.ExternArgumentListContext = ExternArgumentListContext; 
